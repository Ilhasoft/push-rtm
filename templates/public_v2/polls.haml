- extends "public_base_v2.html"

-load compress thumbnail humanize ureport i18n


- block content
  .booklet-bg
  .booklet-bg-content
    .page-title-block
      .uk-grid-match(uk-grid)
        .uk-width-1-2.page-title
          Opinions
        
        .uk-width-1-2.categories-dropdown
          .dropdown
            .dropdown-trigger
              %button.uk-button(aria-haspopup="true" aria-controls="dropdown-menu")
                %span
                  -trans "SEARCH"
                %span.icon.is-small
                  %i.fas.fa-caret-down(aria-hidden="true")
            #dropdown-menu.dropdown-menu.polls-overlay(role="menu" uk-dropdown="mode: click")
              .dropdown-content
                .dropdown-item.search-polls
                  .uk-margin
                    .uk-inline#search-input(style="width:100%")
                      %input.uk-input(type="text" placeholder="Search")
                      %a#search-clear.uk-form-icon.uk-form-icon-flip(href="#" uk-icon="icon: close")
                
                .dropdown-item.no-results.uk-hidden
                  No results...
                .dropdown-item.polls-category(role="all-polls")
                  .polls-category-label
                    %span
                      %i.fas.fa-chevron-right
                    -trans "All"
                  %ul.polls-category-list
                    - for poll in polls
                      %li.poll-list-item
                        %a(href="{% url 'v2.public.opinion_read' poll.id %}")
                          {{ poll.title }} ({{poll.poll_date|date}})

                - for category in categories
                  - if category.polls.all|length
                    .dropdown-item.polls-category
                      .polls-category-label
                        %span
                          %i.fas.fa-chevron-right
                        {{ category.name }}
                      %ul.polls-category-list
                        - for poll in category.polls.all
                          %li.poll-list-item
                            %a(href="{% url 'v2.public.opinion_read' poll.id %}")
                              {{ poll.title }} ({{poll.poll_date|date}})

  .poll-stats-top.uk-margin-remove(uk-grid)
    .uk-width-1-2.right-border-content-block
      .inside-content-block
        .poll-category-label
          {{ latest_poll.category.name|upper }}
        .poll-title
          {{ latest_poll.title }}
        .poll-date
          {{ latest_poll.poll_date }}
        .poll-response-stats
          .responses-count
            .number-figure
              {{ latest_poll.responded_runs|intcomma }}
            .number-label
              - trans "RESPONSES"
          .responses-percentage
              .number-figure
                {{ latest_poll.response_percentage }}
              .number-label
                - trans "RESPONSE RATE"
  
        .poll-stats-graph.uk-height-match
          .poll-gender-graph
            .gender-stats
              .gender-stat-icon
                %i.fas.fa-male
              .gender-stat-percentage
                {{gender_stats.female.percentage}}
              .gender-stat-count
                {{gender_stats.female.count}}
            .gender-stats
              .gender-stat-icon
                %i.fas.fa-female
              .gender-stat-percentage
                {{gender_stats.male.percentage}}
              .gender-stat-count
                {{gender_stats.male.count}}
          .poll-age-graph
            .age-stats{ id: "age-chart"}

    .uk-width-1-2.bottom-border-content-block
      .map-title
        TOTAL RESPONSES
      .inside-content-block.poll-map-block
        .poll-map{ data-question: "{{ top_question.id }}", id: "map-{{ top_question.id }}" }
          .loading-placeholder{id:"map-{{ top_question.id }}-placeholder"}
             %img{src:"{{ STATIC_URL }}img/loading.gif"}     

  - for question in latest_poll.get_questions
   .poll-question-block.uk-margin-remove(id="question-id-{{question.id}}" uk-grid)
       - if not forloop.counter|divisibleby:2
         .uk-width-1-2.block-content(class="for{{ forloop.counter0}}")
           .(uk-grid)
             .uk-width-auto.question-number
               {{ forloop.counter }}
             .uk-width-expand
               .question-line
             .uk-width-1-1.question-title
               {{ question.title }}
             .uk-width-1-1.left-zone
               {% blocktrans with responded=question.get_responded|intcomma polled=question.get_polled|intcomma %}
                 {{ responded }} responded out of {{ polled }} polled
               {% endblocktrans %}     
       .uk-width-1-2.block-content
         .(uk-grid)
          .uk-width-2-3
            .uk-button-group(uk-switcher="animation: uk-animation-fade; toggle: > *")
              - if question.is_open_ended
                %button.uk-button.uk-button-default
                  -trans "Keywords"
              -else
                %button.uk-button.uk-button-default
                  All
                %button.uk-button.uk-button-default
                  Age
                %button.uk-button.uk-button-default
                  Gender
                -# %button.uk-button.uk-button-default
                -#   State
                -# .(uk-dropdown="mode:click;")
                -#     %ul.uk-list.uk-height-medium.uk-overflow-auto
                -#       - for state in states
                -#         %li
                -#           %input.uk-checkbox(type="checkbox")
                -#           {{state}}
                        
                  -# 
                  -# %form.uk-form-horizontal
                  -#   - for state in states
                  -#     %label
                  -#       %input.uk-checkbox(type="checkbox")
                  -#         {{state}}
            %ul.uk-switcher
              - if question.is_open_ended
                %li
                  .tab-content.is-active(data-content='keywords-chart-{{question.id}}')
                    .poll-question-graph-keywords(id="graph-keywords-question-{{question.id}}" data-question="{{question.id}}")
              -else
                %li
                  .tab-content.is-active(data-content='all-chart-{{question.id}}')
                    .poll-question-graph-all.has-highcharts(id="graph-all-question-{{question.id}}" data-question="{{question.id}}")
                %li
                  .tab-content(data-content='age-chart-{{question.id}}')
                    .poll-question-graph-age.has-highcharts(id="graph-age-question-{{question.id}}" data-question="{{question.id}}")
                %li
                  .tab-content(data-content='gender-chart-{{question.id}}')
                    .poll-question-graph-gender.has-highcharts(id="graph-gender-question-{{question.id}}" data-question="{{question.id}}")
                  
                %li
                  STATE segments

          .uk-width-1-3
            %ul.uk-iconnav
              %li
                %a(href="mailto:?subject=Check out {{ poll.title|urlencode:\"\" }} results&amp;body=Check out the results for U-Report poll on {% org_host_link %}{% url 'v2.public.opinion_read' latest_poll.pk %}#question-id-{{question.id}}" uk-icon="icon: mail; ratio: 1.5")
              %li
                %a(uk-icon="icon: whatsapp; ratio: 1.5" href="https://api.whatsapp.com/send?text={% org_host_link %}{% url 'v2.public.opinion_read' latest_poll.pk %}#question-id-{{question.id}}")
              %li
                %a(uk-icon="icon: twitter; ratio: 1.5" href="https://twitter.com/intent/tweet?url={% org_host_link %}{% url 'v2.public.opinion_read' latest_poll.pk %}#question-id-{{question.id}}")
              %li
                %a(uk-icon="icon: facebook; ratio: 1.5" href="" data-question="{{question.id}}" data-question-url="{% org_host_link %}{% url 'v2.public.opinion_read' latest_poll.pk %}#question-id-{{question.id}}")

       - if forloop.counter|divisibleby:2
         .uk-width-1-2.block-content(class="for{{ forloop.counter0}}")
           .(uk-grid)
             .uk-width-expand
               .question-line
             .uk-width-auto.question-number
               {{ forloop.counter }}
             .uk-width-1-1.question-title
               {{ question.title }}
             .uk-width-1-1.right-zone
               {% blocktrans with responded=question.get_responded|intcomma polled=question.get_polled|intcomma %}
                 {{ responded }} responded out of {{ polled }} polled
               {% endblocktrans %}

  - for story in main_stories|slice:"1"  
    .booklet-bg
    .booklet-bg-content
      .content-color-bg
      .content-container-block
        .poll-story-block
          .(uk-grid)
            .uk-width-5-6
            .uk-width-1-6
              <img width="50%" src="{{ STATIC_URL }}img/medium-u-white.png" />
          .(uk-grid)
            .uk-width-1-1.poll-story-title-text
              {{ story.title }}

          .(uk-grid)
             .uk-width-1-1.poll-story-date
               {{ story.created_on|date:"M j. Y" }}
             -if story.get_written_by
               .uk-width-1-1.poll-story-author
                 - trans "BY"
                 {{ story.get_written_by|upper }}

             .uk-width-1-1.poll-story-text
               {{ story.content|safe }}

          - if latest_poll
            .(uk-grid)
              .uk-width-1-1(style="margin: 5rem 0 1rem 0;")
                .fb-comments(data-href="{% org_host_link %}{% url 'v2.public.opinion_read' latest_poll.pk %}" data-width="100%" data-numposts="5")

- block extra-style
  {{ block.super }}

  :css
    .hero-container {
      {% if latest_poll %}
      {% thumbnail latest_poll.get_category_image "1280x678" crop="top" as im %}
        background-image:url('{{im.url}}');
      {% empty %}
        background-image: url('{{ STATIC_URL }}img/missing_image_placeholder.jpg');
      {% endthumbnail %}
      {% endif%}
    }

    .hero-small-background {
      {% if latest_poll %}
      {% thumbnail latest_poll.get_category_image "768x508" crop="top" as im %}
        background-image:url('{{im.url}}');
      {% empty %}
        background-image: url('{{ STATIC_URL }}img/missing_image_placeholder.jpg');
      {% endthumbnail %}
      {% endif%}
    }

    .poll-map {
      height: 600px;
      width: 100%;
    }

    .poll-map svg {
      height: 600px;
    }

    .leaflet-container {
      background: #fff;
    }

    .top-color {
      color: rgb(0,104,55);
    }

    .other-color {
      color: rgb(165,0,38);
    }

    .poll-word-cloud {
      width: 100%;
      min-height: 750px;
    }

    .scale {
      {% if org|config:"is_global" %}
      display: none;
      {% endif %}
    }
    
    .map-title {
      font-size: 1.2rem;
      text-align: center;
      font-family: SharpSansDisplayBold, sans-serif;
      padding-top: 0.2rem
    }

    .leaflet-popup-content {
      margin: 0.5rem;
    }

    .leaflet-popup-content-wrapper {
      border-radius: 0;
    }

    .leaflet-popup-content-wrapper .popup-region-name {
      color: #FFF;
      font-size: 1.2rem;
      line-height: 1rem;
      font-variant-caps: all-small-caps;
    }

    .leaflet-popup-content-wrapper .popup-responses-number {
      color: #FF0;
      font-size: 1rem;
      line-height: 0.75rem;
      font-variant-caps: all-small-caps;
    }
    .leaflet-popup-content-wrapper, .leaflet-popup-tip {
      background-color: #000;
    }
    .leaflet-container a.leaflet-popup-close-button {
      display:none;
    }

    .legend {
      line-height: 12px;
      color: #555;
    }
    .legend i {
      width: 12px;
      height: 12px;
      float: left;
      margin-right: 5px;
      opacity: 0.7;
    }

-block extra-script
  {{ block.super }}
  <script src="{{ STATIC_URL }}js/jqcloud.min.js"></script>
  <script src="{{ STATIC_URL }}js/html2canvas.min.js"></script>
  {% compress js %}
  <script type="text/coffeescript" src="{{ STATIC_URL }}coffee/locations_v2.coffee" />
  <script type="text/coffeescript" src="{{ STATIC_URL }}coffee/all_polls.coffee" />
  {% endcompress %}

  {% include "public/strings_values.html" %}
  :javascript
    $(".dropdown-trigger").on('click', function() {
      $(this).siblings('.dropdown-menu').toggleClass('is-active');
      $(this).toggleClass('rotation');
      $(".polls-category-list").addClass("uk-hidden");
      $("#search-input input").focus();

    });

    $(".facebook-share").on("click", function() {
      var question = $(this).attr("data-question");
      var questionURL = $(this).attr("data-question-url");
      var url = "https://www.facebook.com/sharer/sharer.php?u=" + questionURL;
      FB.ui(
        {
          method: "share",
          href: url
        }, 
        function(response) {
          console.log(response);
        }
      )
    });

    $("#age-chart").each(function(){
           var data = {{ age_stats|safe }};

           {% if is_rtl_org %}
           data.reverse();
           {% endif %}

           var categories = [];

           for (i=0; i<data.length; i++) {
             categories.push(data[i].name)
           }

           $('#age-chart').highcharts({
             chart: {
               type: 'column',
               backgroundColor: "#000",
               spacing: [ 3, 5, 3, 5],
               height: "30%",
             },
             credits: {
               enabled: false
             },
             legend: {
               enabled: false
             },
             title: {
                 text: null
             },
             subtitle: {
                 text: null
             },
             xAxis: {
               categories: categories,
               labels : {
                   rotation: 0,
                   style: {
                     fontSize: 20,
                     fontFamily: "SharpSansDisplayBold",
                     color: "#000",
                 }
               },
               minorTickLength: 0,
               tickLength: 0
             },
             yAxis: {
               min: 0,
               labels: {
                 enabled: false
               },
               visible: false,
               gridLineWidth: 0,
               title: {
                 text: null
               }
             },
             tooltip: {
               enabled: false
             },
             plotOptions: {
                 column: {
                     color: '#000',
                     pointPadding: 0.2,
                     pointWidth: 30,
                     borderWidth: 0,
                     dataLabels:  {
                       enabled: true,
                       style: {
                         fontFamily: "SharpSansDisplayBold",
                       },
                       color: "#000",
                       verticalAlign:"bottom",
                       format: '<b>{point.y:.0f}%</b>'
                     }
                 }
             },
             series: [ {name: 'Age' , data: data } ]
           });
         });



    $(".screenshot-capture").on("click", function() {
        var question = $(this).attr("data-question");
        $(".export-modal-progress").show();
        $(".export-modal-content").hide();

        $('.modal').toggleClass('is-active');
        var region = document.body.querySelector("#question-id-" + question);
        console.log(region);

        html2canvas(region).then(canvas => {
          var imgFile = canvas.toDataURL("image/png");
          $("img.screenshot-rendered").attr("src", imgFile);
          $("a.screenshot-link").attr("href", imgFile);
          $("a.screenshot-link").attr("download", "share-export-screenshot.png");
          $(".export-modal-progress").hide();
          $(".export-modal-content").show();
        });
    });


    $(document).ready(function() {
      $(document).mouseup(function (e){
        var container = $(".dropdown-menu, .dropdown-trigger");
        if (!container.is(e.target) && container.has(e.target).length === 0){
          container.removeClass('is-active');
          container.removeClass('rotation');
        }
      });

      $(".tabs ul li").on('click', function() {
        var tab = $(this).data('tab');
        $(this).parent().parent('.tabs').children().children('li').removeClass('is-active');

        $(this).addClass('is-active');
        $(this).parent().parent('.tabs').siblings(".tabs-content").children(".tab-content").removeClass('is-active');
        $('div[data-content="' + tab + '"]').addClass('is-active');

        var oldChart = $('div[data-content="' + tab + '"]').children('.has-highcharts').highcharts();
        if(oldChart) {
          var options = Object.assign(oldChart.options)
          var id = oldChart.renderTo.id;
          oldChart.destroy();
          Highcharts.chart(id, options);

        }

      });
    });

    $(".polls-category-label").on('click', function() {
      $(this).siblings('ul').toggleClass('uk-hidden');
      $(this).toggleClass('rotation')
      $(this).toggleClass('is-active')
    });

    function resetPolls() {
      $(".poll-list-item").removeClass("uk-hidden");
      $('.polls-category-label').removeClass('rotation');
      $(".polls-category").removeClass("uk-hidden");
      $(".polls-category").children('ul').addClass("uk-hidden");
      $(".no-results").addClass('uk-hidden');
    }

    $("#search-clear").on("click", function() {
      $(this).parent('#search-input').children('input').val("");
      resetPolls();
    });

    $("#search-input input").on('keyup', function() {
      var term = $(this).val().toLowerCase().trim();
      $(".polls-category").addClass("uk-hidden");
      $(".no-results").addClass('uk-hidden');
      if(!term) {
        $(".poll-list-item").removeClass("uk-hidden");
        resetPolls();
        return;
      } else {
        $(".poll-list-item").each( function() {

          if (!$(this).text().trim().toLowerCase().includes(term)) {
            $(this).addClass("uk-hidden");
          } else {
            $(this).removeClass("uk-hidden");
          }
        })
      }
      $(".poll-list-item:not(.uk-hidden)").parent().parent(".polls-category").removeClass("uk-hidden");
      $(".polls-category:not(.uk-hidden):not([role='all-polls'])").children('.polls-category-label').addClass('rotation');
      $(".polls-category:not(.uk-hidden):not([role='all-polls'])").children('ul').removeClass("uk-hidden");

      if ($(".polls-category:not(.uk-hidden)").length == 0) {
        $(".no-results").removeClass('uk-hidden');
      }
    })


    $(function(){
      $(".poll-question-graph-all").each(function(){
        var question = $(this).attr("data-question");
        $.ajax({url:'/pollquestion/' + question + '/results/', dataType: "json"}).done(function(result){

          if(!result){
            return;
          }

          var results = result[0];

          var categories = [];
          var data = [];
          var colors = ["#7cb5ec", "#434348", "#90ed7d", "#f7a35c", "#8085e9", "#f15c80", "#e4d354", "#2b908f", "#f45b5b", "#91e8e1"];


          if (results.categories.length > 0) {
          var total = 0;
          for (i=0; i<results.categories.length; i++){
            category = results.categories[i];
            total += category.count;
          }
          var percentage_lookup = {};
          for (i=0; i<results.categories.length; i++){
            category = results.categories[i];
            label = category.label.trim().toUpperCase();
            categories.push(label);
            percentage = (category.count == 0) ? 0 : category.count * 100 / total;
            percentage_lookup[label] = Math.round(percentage);
            if (parseInt(percentage_lookup[label])) {
              data.push({y: percentage, color: colors[i%colors.length]});
            }
          }
          } 

          (function (H) {

          var pendingRenders = [];
      
          // https://stackoverflow.com/questions/123999/how-to-tell-if-a-dom-element-is-visible-in-the-current-viewport/7557433#7557433
          function isElementInViewport(el) {
          
              var rect = el.getBoundingClientRect();
      
              return (
                  rect.top >= 0 &&
                  rect.left >= 0 &&
                  rect.bottom <= (
                      window.innerHeight ||
                      document.documentElement.clientHeight
                  ) &&
                  rect.right <= (
                      window.innerWidth ||
                      document.documentElement.clientWidth
                  )
              );
          }
      
          H.wrap(H.Series.prototype, 'render', function deferRender(proceed) {
              var series = this,
                  renderTo = this.chart.container.parentNode;
      
              // It is appeared, render it
              if (isElementInViewport(renderTo) || !series.options.animation || series.chart.userOptions.chart.type == 'packedbubble') {
                  proceed.call(series);
      
              // It is not appeared, halt renering until appear
              } else  {
                  pendingRenders.push({
                      element: renderTo,
                      appear: function () {
                          proceed.call(series);
                      }
                  });
              }
          });
      
          function recalculate() {
              pendingRenders.forEach(function (item) {
                  if (isElementInViewport(item.element)) {
                      item.appear();
                      H.erase(pendingRenders, item);
                  }
              });
          }
      
          if (window.addEventListener) {
              ['DOMContentLoaded', 'load', 'scroll', 'resize']
                  .forEach(function (eventType) {
                      addEventListener(eventType, recalculate, false);
                  });
          }
      
          }(Highcharts));

          Highcharts.chart('graph-all-question-' + question, {
            chart: {
              type: 'bar'
            },
            title: {
              text: null,
            },
            xAxis: {
              categories: categories,
              title: {
                text: null
              },
              labels: {
                enabled: false,
              }
            },
            yAxis: {
              min: 0,
              visible: false,
              title: {
                text: null,
              },
              labels: {
                enabled: false,
              }
            },
            tooltip: {
            },
            plotOptions: {
              bar: {
                dataLabels: {
                  enabled: true,
                  inside: true,
                  align: "left",
                  formatter: function() {
                    return this.x
                  }

                }
              }
            },
            legend: {
              enabled: false,
            },
            credits: {
              enabled: false
            },
            series: [{
              data: data,
            }]
          });
          
        });
      });
  
      $(".poll-question-graph-gender").each(function(){
        var question = $(this).attr("data-question");
        var segment = {"gender": "Gender"}
        $.ajax({url:'/pollquestion/' + question + '/results/?segment=' + encodeURIComponent(JSON.stringify(segment)), dataType: "json"}).done(function(result){

          if(!result){
            return;
          }

          var results = result;
          var genders = [];
          var colors = ["#3FB5E5", "#FF8200", "#009316"];

          var categories_by_gender = {}
          var total_by_catedory = {};
          
          for (i=0; i<results.length; i++){
            result = results[i];
            gender = result.label;
            genders.push(gender);
            for (j=0; j<result.categories.length; j++){
              category = result.categories[j];
              label = category.label.trim().toUpperCase();
              if(!(label in categories_by_gender)) {
                categories_by_gender[label] = {};
                total_by_catedory[label] = 0;
              }
              categories_by_gender[label][gender] = category.count;
              total_by_catedory[label] += category.count;
            }
          }

          var data_by_gender = {};
          for (i=0; i<genders.length; i++){
            gender = genders[i];
            data_by_gender[gender] = [];
          }
          var percentage_lookup = {};

          for (key in categories_by_gender) {
            percentage_lookup[key] = {}
            total_key = total_by_catedory[key];
            for (i=0; i<genders.length; i++){
              gender = genders[i];
              count = categories_by_gender[key][gender];

              percentage = (count == 0) ? 0 : count * 100 / total_key; 
              data_by_gender[gender].push(percentage);
            }
          }

          series = [];
          for (key in data_by_gender) {
            series.push({name: key, data: data_by_gender[key]})
          }

          Highcharts.chart('graph-gender-question-' + question, {
            chart: {
              type: 'column'
            },
            title: {
              text: null,
            },
            xAxis: {
              categories: Object.keys(categories_by_gender),
              crosshair: true
            },
            yAxis: {
              min: 0,
              max: 100,
              title: {
                text: null,
              }
            },
            tooltip: {
              headerFormat: '<span style="font-size:10px">{point.key}</span><table>',
              pointFormat: '<tr><td style="color:{series.color};padding:0">{series.name}: </td>' +
                '<td style="padding:0"><b>{point.y:.1f} mm</b></td></tr>',
              footerFormat: '</table>',
              shared: true,
              useHTML: true
            },
            colors: colors,
            plotOptions: {
              column: {
                pointPadding: 0.2,
                borderWidth: 0
              }
            },
            credits: {
              enabled: false
            },            
            series: series,
          });

        });
      });

      $(".poll-question-graph-age").each(function(){
        var question = $(this).attr("data-question");
        var segment = {"age": "Age"}
        $.ajax({url:'/pollquestion/' + question + '/results/?segment=' + encodeURIComponent(JSON.stringify(segment)), dataType: "json"}).done(function(result){

          if(!result){
            return;
          }

          var results = result;
          var genders = [];
          var colors = ["#E3002B", "#050E28", "#FED100", "#3FB5E5", "#FF8200", "#009316"];

          var categories_by_gender = {}
          var total_by_catedory = {};
          
          for (i=0; i<results.length; i++){
            result = results[i];
            gender = result.label;
            genders.push(gender);
            for (j=0; j<result.categories.length; j++){
              category = result.categories[j];
              label = category.label.trim().toUpperCase();
              if(!(label in categories_by_gender)) {
                categories_by_gender[label] = {};
                total_by_catedory[label] = 0;
              }
              categories_by_gender[label][gender] = category.count;
              total_by_catedory[label] += category.count;
            }
          }

          var data_by_gender = {};
          for (i=0; i<genders.length; i++){
            gender = genders[i];
            data_by_gender[gender] = [];
          }
          var percentage_lookup = {};

          for (key in categories_by_gender) {
            percentage_lookup[key] = {}
            total_key = total_by_catedory[key];
            for (i=0; i<genders.length; i++){
              gender = genders[i];
              count = categories_by_gender[key][gender];

              percentage = (count == 0) ? 0 : count * 100 / total_key; 
              data_by_gender[gender].push(percentage);
            }
          }

          series = [];
          for (key in data_by_gender) {
            series.push({name: key, data: data_by_gender[key]})
          }

          Highcharts.chart('graph-age-question-' + question, {
            chart: {
              type: 'column'
            },
            title: {
              text: null,
            },
            xAxis: {
              categories: Object.keys(categories_by_gender),
              crosshair: true
            },
            yAxis: {
              min: 0,
              max: 100,
              title: {
                text: null,
              }
            },
            tooltip: {
              headerFormat: '<span style="font-size:10px">{point.key}</span><table>',
              pointFormat: '<tr><td style="color:{series.color};padding:0">{series.name}: </td>' +
                '<td style="padding:0"><b>{point.y:.1f}%</b></td></tr>',
              footerFormat: '</table>',
              shared: true,
              useHTML: true
            },
            colors: colors,
            plotOptions: {
              column: {
                pointPadding: 0.2,
                borderWidth: 0
              }
            },
            credits: {
              enabled: false
            },            
            series: series,
          });
          
        });
      });
    });

    $(".poll-question-graph-keywords").each(function(){
      var question = $(this).attr("data-question");

      var question = $(this).attr("data-question");
      $.ajax({url:'/pollquestion/' + question + '/results/', dataType: "json"}).done(function(result){      
          if(!result){
            return;
          }

          var results = result[0];
          var total = 0;
          var data = [];
          var colors = gradientFactory.generate({
            from: '#DDDDDD',
            to: '{{ org|config:"primary_color"}}',
            stops: 10
          });
          
          if (results.categories.length > 0) {
            for (i=0; i<results.categories.length; i++){
              category = results.categories[i];
              total += category.count;
            }
            var percentage_lookup = {};
            for (i=0; i<results.categories.length; i++){
              category = results.categories[i];
              label = category.label.trim().toUpperCase();
              percentage = (category.count == 0) ? 0 : category.count * 100 / total;
              percentage_lookup[label] = Math.round(percentage);
              if (parseInt(percentage_lookup[label])) {
                data.push({name: label, value: percentage, color: colors[Math.min(9, Math.floor(percentage/1.5))]})
              } 
            }
          }



          Highcharts.chart('graph-keywords-question-' + question, {
            chart: {
              type: 'packedbubble',
              height: '100%'
            },
            title: {
              text: null,
            },
            tooltip: {
              useHTML: true,
              pointFormat: '<b>{point.name}:</b> {point.y}m CO<sub>2</sub>'
            },
            legend: {
              enabled: false,
            },
            plotOptions: {
              packedbubble: {
                minSize: '20',
                maxSize: '400',
                zMin: 0,
                zMax: 100,
                dataLabels: {
                  enabled: true,
                  format: '{point.name}',
                  style: {
                    color: 'black',
                    textOutline: 'none',
                    fontWeight: 'normal'
                  }
                }
              }
            },
            credits: {
              enabled: false
            },
            series: [{
              data: data
            }]
        });
      });
    });

    $(function(){

      $(".poll-question-tab").on('click', function (){
        $(this).parent('.poll-question-tabs').children('.poll-question-tab').removeClass('active');
        $(this).parent('.poll-question-tabs').children('.poll-question-tab').children('a').removeClass('primary-bg-color')
        $(this).parent('.poll-question-tabs').children('.poll-question-tab').children('a').addClass('primary-color')

        $(this).addClass('active');
        $(this).children('a').removeClass('primary-color');
        $(this).children('a').addClass('primary-bg-color');
      });

      $(".poll-question-tab").on('shown.bs.tab', function(e) {
         var tabPaneShown = e.target.getAttribute('href');
         var mapDiv = $(tabPaneShown).children('.poll-map');

         if (mapDiv.length) {
            var map = mapDiv.data('map');
            map.invalidateSize(false);
         }
      });


      $.ajax({url:'/boundaries/', dataType: "json"}).done(function(boundaries){
        $(".poll-map").each(function(){
          var question = $(this).attr("data-question");
          var colorList = {{ colors_map|safe }};
          var map = window.initMap('map-' + question, boundaries, question, '{{ district_zoom|lower }}' === 'true', '{{ ward_zoom|lower }}' === 'true', colorList=colorList);


          console.log(map);
          $(this).data('map', map);
        });
      });

    });
