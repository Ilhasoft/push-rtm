- extends "public_base_v2.html"

-load compress thumbnail humanize ureport i18n


- block content
  %section.section.page-title-block.block-content.booklet-bg
    .columns
      .column.page-title
        Opinions
      .column.categories-dropdown
        .dropdown
          .dropdown-trigger
            .button
              .dropdown-text
                %span
                  BROWSE CATEGORIES
                %span.icon.is-small
                  %i.fas.fa-angle-down(aria-hidden="true")
  %section.section.poll-title-block.block-content
    .columns
      .column.is-half.questions-count
        {% blocktrans count questions=latest_poll.get_questions.count %}
          {{ questions }} question
        {% plural %}
          {{ questions }} questions
        {% endblocktrans %}
      .column.is-half.has-text-right
        .recent-results.is-inline-block
          Recent Poll Results
        .poll-category.is-inline-block
          {{ latest_poll.category.name|upper }}
    .columns
      .column.is-half.poll-title
        {{ latest_poll.title }}
      .column.is-half.has-text-right
        .poll-stats
          .responses-count.is-inline-block.has-text-centered
            .number-figure
              {{ latest_poll.responded_runs|intcomma }}
            .number-label
              - trans "RESPONSES"
          .responses-percentage.is-inline-block.has-text-centered
            .number-figure
              {{ latest_poll.response_percentage }}
            .number-label
              - trans "RESPONSE RATE"
  - for question in latest_poll.get_questions
    %section.section.columns.is-paddingless.is-marginless.poll-question-block
        - if not forloop.counter|divisibleby:2
          .column.is-half.block-content(class="for{{ forloop.counter0}}")
            .columns.is-multiline
              .column.is-full.is-size-5.has-text-weight-semibold
                {{ question.title }}
              .column.is-full.is-size-7.has-text-weight-semibold
                {% blocktrans with responded=question.get_responded|intcomma polled=question.get_polled|intcomma %}
                  {{ responded }} responded out of {{ polled }} polled
                {% endblocktrans %}

        .column.is-half.block-content
          .columns
            .column
              .is-small
                -trans "FILTER BY:"
              .tabs.is-boxed
                %ul
                  %li.is-active(data-tab='all-chart-{{question.id}}')
                    %a
                      -trans "ALL"
                  %li(data-tab='age-chart-{{question.id}}')
                    %a
                      -trans "AGE"
                  %li(data-tab='gender-chart-{{question.id}}')
                    %a
                      -trans "GENDER"
                  %li(data-tab='map-chart-{{question.id}}')
                    %a
                      -trans "LOCATION"
              .tabs-content
                .tab-content.is-active(data-content='all-chart-{{question.id}}')
                  %canvas.poll-question-graph-all(id="graph-all-question-{{question.id}}" data-question="{{question.id}}")
                .tab-content(data-content='age-chart-{{question.id}}')
                  %canvas.poll-question-graph-age(id="graph-age-question-{{question.id}}" data-question="{{question.id}}")
                .tab-content(data-content='gender-chart-{{question.id}}')
                  %canvas.poll-question-graph-gender(id="graph-gender-question-{{question.id}}" data-question="{{question.id}}")
                .tab-content(data-content='map-chart-{{question.id}}')
                  .poll-map{ data-question: "{{ question.id }}", id: "map-{{ question.id }}" }
                    .loading-placeholder{id:"map-{{ question.id }}-placeholder"}
                        %img{src:"{{ STATIC_URL }}img/loading.gif"}
        
        - if forloop.counter|divisibleby:2
          .column.is-half.block-content(class="for{{ forloop.counter0}}")
            .columns.is-multiline
              .column.is-full.is-size-5.has-text-weight-semibold
                {{ question.title }}
              .column.is-full.is-size-7.has-text-weight-semibold
                {% blocktrans with responded=question.get_responded|intcomma polled=question.get_polled|intcomma %}
                  {{ responded }} responded out of {{ polled }} polled
                {% endblocktrans %}

- block rsrs
  %section.section.poll-story-title-block.block-content
    .columns.is-multiline
      - for story in related_stories|slice:"1"
        .column.is-full.is-size-4.has-text-weight-semibold.booklet-bg
          {{ story.title }}
        .column.is-full
          {{ story.created_on|date:"M j. Y" }}
        -if story.get_written_by
          .column.is-full
            - trans "BY"
            {{ story.get_written_by|upper }}
          
        .column.is-full
          {{ story.content|safe }}  

  - if latest_poll
    %section.section.block-content
      .columns
        .column.is-full
          .fb-comments(data-href="{% org_host_link %}{% url 'v2.public.opinion_read' latest_poll.pk %}" data-width="100%" data-numposts="5")


- block extra-style
  {{ block.super }}

  :css
    .hero-container {
      {% if latest_poll %}
      {% thumbnail latest_poll.get_category_image "1280x678" crop="top" as im %}
        background-image:url('{{im.url}}');
      {% empty %}
        background-image: url('{{ STATIC_URL }}img/missing_image_placeholder.jpg');
      {% endthumbnail %}
      {% endif%}
    }

    .hero-small-background {
      {% if latest_poll %}
      {% thumbnail latest_poll.get_category_image "768x508" crop="top" as im %}
        background-image:url('{{im.url}}');
      {% empty %}
        background-image: url('{{ STATIC_URL }}img/missing_image_placeholder.jpg');
      {% endthumbnail %}
      {% endif%}
    }

    .poll-map {
      height: 500px;
      width: 100%;
    }

    .poll-map svg {
      height: 480px;
    }

    .leaflet-container {
      background: #fff;
    }

    .top-color {
      color: rgb(0,104,55);
    }

    .other-color {
      color: rgb(165,0,38);
    }

    .poll-word-cloud {
      width: 100%;
      min-height: 750px;
    }

    .scale {
      {% if org|config:"is_global" %}
      display: none;
      {% endif %}
    }

-block extra-script
  {{ block.super }}
  <script src="{{ STATIC_URL }}js/jqcloud.min.js"></script>
  {% compress js %}
  <script type="text/coffeescript" src="{{ STATIC_URL }}coffee/locations.coffee" />
  <script type="text/coffeescript" src="{{ STATIC_URL }}coffee/all_polls.coffee" />
  {% endcompress %}

  {% include "public/strings_values.html" %}
  :javascript

    $(function(){
      $(".poll-question-graph-all").each(function(){
        var question = $(this).attr("data-question");
        $.ajax({url:'/pollquestion/' + question + '/results/', dataType: "json"}).done(function(result){

          if(!result){
            return;
          }

          var results = result[0];

          var categories = [];
          var data = [];

          var total = 0;
          for (i=0; i<results.categories.length; i++){
            category = results.categories[i];
            total += category.count;
          }
          var percentage_lookup = {};
          for (i=0; i<results.categories.length; i++){
            category = results.categories[i];
            label = category.label.trim().toUpperCase();
            categories.push(label);
            percentage = (category.count == 0) ? 0 : category.count * 100 / total;
            percentage_lookup[label] = Math.round(percentage);
            if (parseInt(percentage_lookup[label])) {
              data.push({ name:label,  y: percentage });
            }
          }

          var ctx= $('#graph-all-question-' + question);
          var myChart = new Chart(ctx, {
                type: 'bar',
                data: {
                    labels: categories,
                    datasets: [{
                        label: '# of Votes',
                        data: data,
                        backgroundColor: [
                            'rgba(255, 99, 132, 0.2)',
                            'rgba(54, 162, 235, 0.2)',
                            'rgba(255, 206, 86, 0.2)',
                            'rgba(75, 192, 192, 0.2)',
                            'rgba(153, 102, 255, 0.2)',
                            'rgba(255, 159, 64, 0.2)'
                        ],
                        borderColor: [
                            'rgba(255, 99, 132, 1)',
                            'rgba(54, 162, 235, 1)',
                            'rgba(255, 206, 86, 1)',
                            'rgba(75, 192, 192, 1)',
                            'rgba(153, 102, 255, 1)',
                            'rgba(255, 159, 64, 1)'
                        ],
                        borderWidth: 1
                    }]
                },
                options: {
                    scales: {
                        yAxes: [{
                            ticks: {
                                beginAtZero: true
                            }
                        }]
                    }
                }
            });
          });

        })

      $(".poll-question-graph-gender").each(function(){
        var question = $(this).attr("data-question");
        var segment = {"gender": "Gender"}
        $.ajax({url:'/pollquestion/' + question + '/results/?segment=' + encodeURIComponent(JSON.stringify(segment)), dataType: "json"}).done(function(result){

          if(!result){
            return;
          }

          console.log(result);

          var results = result[0];
          console.log(result);

          var categories = [];
          var data = [];

          var total = 0;
          for (i=0; i<results.categories.length; i++){
            category = results.categories[i];
            total += category.count;
          }
          var percentage_lookup = {};
          for (i=0; i<results.categories.length; i++){
            category = results.categories[i];
            label = category.label.trim().toUpperCase();
            categories.push(label);
            percentage = (category.count == 0) ? 0 : category.count * 100 / total;
            percentage_lookup[label] = Math.round(percentage);
            if (parseInt(percentage_lookup[label])) {
              data.push({ name:label,  y: percentage });
            }
          }

          var ctx= $('#graph-gender-question-' + question);
          var myChart = new Chart(ctx, {
                type: 'bar',
                data: {
                    labels: categories,
                    datasets: [{
                        label: '# of Votes',
                        data: data,
                        backgroundColor: [
                            'rgba(255, 99, 132, 0.2)',
                            'rgba(54, 162, 235, 0.2)',
                            'rgba(255, 206, 86, 0.2)',
                            'rgba(75, 192, 192, 0.2)',
                            'rgba(153, 102, 255, 0.2)',
                            'rgba(255, 159, 64, 0.2)'
                        ],
                        borderColor: [
                            'rgba(255, 99, 132, 1)',
                            'rgba(54, 162, 235, 1)',
                            'rgba(255, 206, 86, 1)',
                            'rgba(75, 192, 192, 1)',
                            'rgba(153, 102, 255, 1)',
                            'rgba(255, 159, 64, 1)'
                        ],
                        borderWidth: 1
                    }]
                },
                options: {
                    scales: {
                        yAxes: [{
                            ticks: {
                                beginAtZero: true
                            }
                        }]
                    }
                }
            });
          });

        })

      $(".poll-question-graph-age").each(function(){
        var question = $(this).attr("data-question");
        var segment = {"age": "Age"}
        $.ajax({url:'/pollquestion/' + question + '/results/?segment=' + encodeURIComponent(JSON.stringify(segment)), dataType: "json"}).done(function(result){

          if(!result){
            return;
          }

          console.log(result);

          var results = result[0];
          console.log(result);

          var categories = [];
          var data = [];

          var total = 0;
          for (i=0; i<results.categories.length; i++){
            category = results.categories[i];
            total += category.count;
          }
          var percentage_lookup = {};
          for (i=0; i<results.categories.length; i++){
            category = results.categories[i];
            label = category.label.trim().toUpperCase();
            categories.push(label);
            percentage = (category.count == 0) ? 0 : category.count * 100 / total;
            percentage_lookup[label] = Math.round(percentage);
            if (parseInt(percentage_lookup[label])) {
              data.push({ name:label,  y: percentage });
            }
          }

          var ctx= $('#graph-age-question-' + question);
          var myChart = new Chart(ctx, {
                type: 'bar',
                data: {
                    labels: categories,
                    datasets: [{
                        label: '# of Votes',
                        data: data,
                        backgroundColor: [
                            'rgba(255, 99, 132, 0.2)',
                            'rgba(54, 162, 235, 0.2)',
                            'rgba(255, 206, 86, 0.2)',
                            'rgba(75, 192, 192, 0.2)',
                            'rgba(153, 102, 255, 0.2)',
                            'rgba(255, 159, 64, 0.2)'
                        ],
                        borderColor: [
                            'rgba(255, 99, 132, 1)',
                            'rgba(54, 162, 235, 1)',
                            'rgba(255, 206, 86, 1)',
                            'rgba(75, 192, 192, 1)',
                            'rgba(153, 102, 255, 1)',
                            'rgba(255, 159, 64, 1)'
                        ],
                        borderWidth: 1
                    }]
                },
                options: {
                    scales: {
                        yAxes: [{
                            ticks: {
                                beginAtZero: true
                            }
                        }]
                    }
                }
            });
          });

        })                

    });
    
    
    $(function(){

      $(".poll-question-tab").on('click', function (){
        $(this).parent('.poll-question-tabs').children('.poll-question-tab').removeClass('active');
        $(this).parent('.poll-question-tabs').children('.poll-question-tab').children('a').removeClass('primary-bg-color')
        $(this).parent('.poll-question-tabs').children('.poll-question-tab').children('a').addClass('primary-color')

        $(this).addClass('active');
        $(this).children('a').removeClass('primary-color');
        $(this).children('a').addClass('primary-bg-color');
      });

      $(".poll-question-tab").on('shown.bs.tab', function(e) {
         var tabPaneShown = e.target.getAttribute('href');
         var mapDiv = $(tabPaneShown).children('.poll-map');

         if (mapDiv.length) {
            var map = mapDiv.data('map');
            map.invalidateSize(false);
         }
      });


      $.ajax({url:'/boundaries/', dataType: "json"}).done(function(boundaries){
        $(".poll-map").each(function(){
          var question = $(this).attr("data-question");
          var colorList = {{ colors_map|safe }};
          var map = window.initMap('map-' + question, boundaries, question, '{{ district_zoom|lower }}' === 'true', '{{ ward_zoom|lower }}' === 'true', colorList=colorList);

          $(this).data('map', map);
        });
      });

      $(".poll-word-cloud").each(function(){
        var question = $(this).attr("data-question");
        $.ajax({url:'/pollquestion/' + question + '/results/', dataType: "json"}).done(function(result){

          if(!result){
            return;
          }

          var results = result[0];
          var cloudData = [];

          for (i=0; i<=25 && i<=results.categories.length; i++){
            word = results.categories[i];
            if (word){
              label = word.label.trim().toUpperCase();
              cloudData.push({ text: label, weight: Math.sqrt(word.count)})
            }
          }

          $('#word-cloud-' + question + '-placeholder').hide();
          $('#word-cloud-' + question).jQCloud(cloudData);

        });
      });
    });
