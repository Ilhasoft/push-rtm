- extends "public_base_v2.html"

-load compress ureport dashblocks thumbnail i18n humanize

- block content
  .booklet-bg
  .booklet-bg-content
    .page-title-block
      .uk-grid-match(uk-grid)
        .uk-width-1-2.page-title
          Engagement

  .engagemment-top-graph-block
    .(uk-grid)
      .uk-width-1-2.block-content(style="background:#000; color:#FFF;")
        .engagement-page-yellow-text.registration-stats-labels
          At a glance
        .registration-stats-numbers.uk-flex-inline
          .signup-part
            .part-count
              {{org.get_signups}}
            .part-label
              SIGN-UPS
          .response-rate-part
            .part-count
              {{average_response_rate|floatformat}} %
            .part-label
              AVG RESPONSE RATE
        .registration-stats-counts.uk-flex-inline
          .part-count.engagement-page-yellow-text
            {{org.get_reporters_count}}
          .part-label
            - trans "TOTAL U-REPORTERS IN" 
            {{ org.name|upper }}
          .part-signu-rate.engagement-page-yellow-text
            +{{org.get_signup_rate|floatformat}} %

        .registration-stats-graphs(uk-grid)
          .uk-width-1-3.uk-flex-inline
            .gender-stats
              .gender-stat-icon
                %i.fas.fa-male
              .gender-stat-percentage
                {{gender_stats.male_percentage}}
              .gender-stat-count.engagement-page-yellow-text
                {{gender_stats.male_count}}
            .gender-stats
              .gender-stat-icon
                %i.fas.fa-female
              .gender-stat-percentage
                {{gender_stats.female_percentage}}
              .gender-stat-count.engagement-page-yellow-text
                {{gender_stats.female_count}}
          .uk-width-2-3.poll-age-graph
            .age-stats{ id: "age-chart"}
            
      .uk-width-1-2.locations-stats.block-content
        .ureport-location-map(id="ureport-location-map-id")
          #ureport-location-map-id-placeholder.loading-placeholder
            %img(src="{{ STATIC_URL }}img/loading.gif")
  
  .filters-block(style="background:#1D1D1D; padding: 2rem 0;")
    .uk-grid-match(uk-grid)
      .uk-width-2-3
        .filter-results-label
          FILTER RESULTS:
      .uk-width-1-3
        .uk-button-group.time-filters-button(uk-switcher="animation: uk-animation-fade; toggle: > *; connect:#engagement-content-time-filters")
          - for time_filter in data_time_filters
            %button.uk-button.uk-button-secondary(class="{% if forloop.first %}left-most{% endif %}{% if forloop.last %}uk-active right-most{% endif %}")
              {{time_filter.label}}

  %ul.uk-switcher(id="engagement-content-time-filters")
    - for time_filter in data_time_filters
      %li.engagemment-content
        - for metric in data_metrics
          .engagement-graph-block
            .(uk-grid)
              .uk-width-1-3.block-content
                .block-border
                  .yellow-bg
                .block-title
                  {{ metric.title }}
                .block-graph-tab-buttons
                  .uk-button-group.ureport-graph-tabs-button(uk-switcher="animation: uk-animation-fade; toggle: > *; connect:#graph-tabs-{{metric.slug}}-{{time_filter.time_filter_number}}")
                    - for segment in data_segments
                      %button.uk-button.uk-button-default(class="{% if forloop.first %}left-most{% endif %}{% if forloop.last %}right-most{% endif %}")
                        {{segment.label}}
              .uk-width-2-3.block-content.animate-graph(uk-scrollspy="cls:uk-animation-fade; delay:200; repeat:true;")
                %ul.uk-switcher.engagement-graph-tabs(id="graph-tabs-{{metric.slug}}-{{time_filter.time_filter_number}}")
                  - for segment in data_segments
                    %li.engagement-graph(id="graph-tabs-{{metric.slug}}-{{segment.segment_type}}-{{time_filter.time_filter_number}}") 
                      .has-graph(id="engagement-graph-{{metric.slug}}-{{segment.segment_type}}-{{time_filter.time_filter_number}}" data-metric-slug="{{metric.slug}}" data-segment-type="{{segment.segment_type}}" data-time-filter="{{time_filter.time_filter_number}}")

-block extra-script
  {{ block.super }}
  {% compress js %}
  <script type="text/coffeescript" src="{{ STATIC_URL }}coffee/ureporters.coffee" />
  {% endcompress %}

  {% include "public/strings_values.html" %}

  :javascript
    $(function(){
      $.ajax({url:'/boundaries/', dataType: "json"}).done(function(boundaries){
        $(".ureport-location-map").each(function(){
          var ajaxUrl = '/v2/contact_field_results/'
          var colorsList = gradientFactory.generate({
            from: '#DDDDDD',
            to: '{{ org|config:"primary_color"}}',
            stops: 6
          });

          window.initMap('ureport-location-map-id', boundaries, ajaxUrl,  '{{ district_zoom|lower }}' === 'true', colorsList, '{{ ward_zoom|lower }}' === 'true', '{{reporters|intcomma}}');
        });
      });
    });

    $(function(){

      $(".engagement-graph").each(function() {
        //console.log($(this));
        var graphDiv = $(this).children(".has-graph");
        var metricSlug = graphDiv.attr("data-metric-slug");
        var segmentType = graphDiv.attr("data-segment-type");
        var timeFilter = graphDiv.attr("data-time-filter");

        var params = {"metric": metricSlug, "segment": segmentType, "filter": timeFilter};
        $.ajax({url:'/v2/engagement_data/?results_params=' + encodeURIComponent(JSON.stringify(params)), dataType: "json"}).done(function(result){
            if(!result){
              return;
            }
            if(!Window.UreportEngagementStats) {
              Window.UreportEngagementStats = {}
            }

            var colors = ['#E3002B', '#050E28', '#FFD100', '#40B5E5', '#FF8200', '#009917'];
            if(segmentType=="all"){
              colors = ['#2f7ed8', '#0d233a', '#8bbc21', '#910000', '#1aadce', '#492970', '#f28f43', '#77a1e5', '#c42525', '#a6c96a'];
            }

            if(segmentType=="gender"){
              colors = ['#40B5E5', '#FF8200', '#019B17'];
            }
            
            var serverData = result;
            var series = [];
            for (i=0; i<serverData.length; i++) {
              data = serverData[i]['data']
              cleanedData = []
              Object.keys(data).forEach(function(key){
                cleanedData.push([Date.parse(key), data[key]]);
              })
              cleanedData.sort(function(a,b){return a[0] - b[0];});
              series.push({name: serverData[i]['name'], data: cleanedData, color: colors[i % colors.length]})
            }
  
            Window.UreportEngagementStats[metricSlug + "-" + segmentType + "-" + timeFilter] = series
        });
  
      });
  
      $(".uk-switcher li.engagement-graph").on('beforeshow', function(event) {
        console.log(event);
        var graphDiv = $("#" + event.target.id).children(".has-graph");
        var metricSlug = graphDiv.attr("data-metric-slug");
        var segmentType = graphDiv.attr("data-segment-type");
        var timeFilter = graphDiv.attr("data-time-filter");
  
        var chartType = "column";
        if (segmentType == 'all') {
          chartType = "spline";
        }
  
  
        var series = Window.UreportEngagementStats[metricSlug + "-" + segmentType + "-" + timeFilter];
  
        $('#engagement-graph-' + metricSlug + "-" + segmentType + "-" + timeFilter).highcharts({
          chart: {
              type: chartType
          },
          title: {
              text: null
          },
          xAxis: {
              type: 'datetime',
              dateTimeLabelFormats: {
                month: '%b %Y',
                year: '%Y'
              },
          },
          yAxis: {
              title: {
                  text: null
              },
              min: 0
          },
          tooltip: {
              headerFormat: '<b>{series.name}</b><br>',
              pointFormat: '{point.x: %b %Y}: {point.y}'
          },
      
          plotOptions: {
              spline: {
                  marker: {
                      enabled: true
                  }
              }
          },
          credits: {
            enabled: false
          },
      
          colors: ['#6CF', '#39F', '#06C', '#036', '#000'],
          series : series
       });
      });

      $(".animate-graph").on('inview', function(event) {
        var graphDiv = $(this).children(".engagement-graph-tabs").children(".engagement-graph").children(".has-graph");
        var metricSlug = graphDiv.attr("data-metric-slug");
        var segmentType = graphDiv.attr("data-segment-type");
        var timeFilter = graphDiv.attr("data-time-filter");
  
        var chartType = "column";
        if (segmentType == 'all') {
          chartType = "spline";
        }
        var dataSlug = metricSlug + "-" + segmentType + "-" + timeFilter;
        var series = Window.UreportEngagementStats[dataSlug];
  
        $('#engagement-graph-' + dataSlug).highcharts({
          chart: {
              type: chartType
          },
          title: {
              text: null
          },
          xAxis: {
              type: 'datetime',
              dateTimeLabelFormats: {
                month: '%b %Y',
                year: '%Y'
              },
          },
          yAxis: {
              title: {
                  text: null
              },
              min: 0
          },
          tooltip: {
              headerFormat: '<b>{series.name}</b><br>',
              pointFormat: '{point.x: %b %Y}: {point.y}'
          },
      
          plotOptions: {
              spline: {
                  marker: {
                      enabled: true
                  }
              }
          },
  
          credits: {   
            enabled: false
          },
      
          colors: ['#6CF', '#39F', '#06C', '#036', '#000'],
          series : series
          });
      });
    });

    $("#poll-responses-graph").each(function() {
    
      var serverData = {{ opinion_responses|safe}};
      var respondedData = [];
      Object.keys(serverData).forEach(function(key){
        respondedData.push([Date.parse(key), serverData[key]]);
      })
      respondedData.sort(function(a,b){return a[0] - b[0];});

      $('#poll-responses-graph').highcharts({
        chart: {
            type: 'spline'
        },
        title: {
            text: null
        },
        xAxis: {
            type: 'datetime',
            dateTimeLabelFormats: {
              month: '%b %Y',
              year: '%Y'
            },
        },
        yAxis: {
            title: {
                text: null
            },
            min: 0
        },
        tooltip: {
            headerFormat: '<b>{series.name}</b><br>',
            pointFormat: '{point.x: %b %Y}: {point.y}'
        },
    
        plotOptions: {
            spline: {
                marker: {
                    enabled: true
                }
            }
        },
        credits: {
          enabled: false
        },
    
        colors: ['#FFF'],
        series :[
          {
            name: "Opinion Responses",
            data: respondedData
          }
        ]
     });

      

    });
    

    
    
    $("#poll-responses-graph-gender").each(function() {
    
      var serverData = {{ opinion_responses_gender|safe}};
      var series = [];
      for (i=0; i<serverData.length; i++) {
        data = serverData[i]['data']
        cleanedData = []
        Object.keys(data).forEach(function(key){
          cleanedData.push([Date.parse(key), data[key]]);
        })
        cleanedData.sort(function(a,b){return a[0] - b[0];});
        series.push({name: serverData[i]['name'], data: cleanedData})
      }

      $('#poll-responses-graph-gender').highcharts({
        chart: {
            type: 'column'
        },
        title: {
            text: null
        },
        xAxis: {
            type: 'datetime',
            dateTimeLabelFormats: {
              month: '%b %Y',
              year: '%Y'
            },
        },
        yAxis: {
            title: {
                text: null
            },
            min: 0
        },
        tooltip: {
            headerFormat: '<b>{series.name}</b><br>',
            pointFormat: '{point.x: %b %Y}: {point.y}'
        },
    
        plotOptions: {
            spline: {
                marker: {
                    enabled: true
                }
            }
        },
        credits: {
          enabled: false
        },
    
        colors: ['#6CF', '#39F', '#06C', '#036', '#000'],
        series : series
     });
    });

    $("#poll-responses-graph-age").each(function() {
    
      var colors = ['#E3002B', '#050E28', '#FFD100', '#40B5E5', '#FF8200', '#009917'];
      var serverData = {{ opinion_responses_age|safe}};
      var series = [];
      for (i=0; i<serverData.length; i++) {
        data = serverData[i]['data']
        cleanedData = []
        Object.keys(data).forEach(function(key){
          cleanedData.push([Date.parse(key), data[key]]);
        })
        cleanedData.sort(function(a,b){return a[0] - b[0];});
        series.push({name: serverData[i]['name'], data: cleanedData, color: colors[i]})
      }
      $('#poll-responses-graph-age').highcharts({
        chart: {
            type: 'column'
        },
        title: {
            text: null
        },
        xAxis: {
            type: 'datetime',
            dateTimeLabelFormats: {
              month: '%b %Y',
              year: '%Y'
            },
        },
        yAxis: {
            title: {
                text: null
            },
            min: 0
        },
        tooltip: {
            headerFormat: '<b>{series.name}</b><br>',
            pointFormat: '{point.x: %b %Y}: {point.y}'
        },
    
        plotOptions: {
            

            spline: {
                marker: {
                    enabled: true
                }
            }
        },
        credits: {
          enabled: false
        },
    
        colors: ['#E3002B', '#050E28', '#FFD100', '#40B5E5', '#FF8200', '#009917'],
        series :series
     });
    });

    $("#poll-response-rate-graph-age").each(function() {
    
      var serverData = {{ response_rate_age|safe}};
      var series = [];
      for (i=0; i<serverData.length; i++) {
        data = serverData[i]['data']
        cleanedData = []
        Object.keys(data).forEach(function(key){
          cleanedData.push([Date.parse(key), data[key]]);
        })
        cleanedData.sort(function(a,b){return a[0] - b[0];});
        series.push({name: serverData[i]['name'], data: cleanedData})
      }
      $('#poll-response-rate-graph-age').highcharts({
        chart: {
            type: 'column'
        },
        title: {
            text: null
        },
        xAxis: {
            type: 'datetime',
            dateTimeLabelFormats: {
              month: '%b %Y',
              year: '%Y'
            },
        },
        yAxis: {
            title: {
                text: null
            },
            min: 0
        },
        tooltip: {
            headerFormat: '<b>{series.name}</b><br>',
            pointFormat: '{point.x: %b %Y}: {point.y}'
        },
    
        plotOptions: {
            spline: {
                marker: {
                    enabled: true
                }
            }
        },
        credits: {
          enabled: false
        },
    
        colors: ['#E3002B', '#050E28', '#FFD100', '#40B5E5', '#FF8200', '#009917'],
        series :series
     });
    });
    
    $("#poll-response-rate-graph-gender").each(function() {
    
      var serverData = {{ response_rate_gender|safe}};
      var series = [];
      for (i=0; i<serverData.length; i++) {
        data = serverData[i]['data']
        cleanedData = []
        Object.keys(data).forEach(function(key){
          cleanedData.push([Date.parse(key), data[key]]);
        })
        cleanedData.sort(function(a,b){return a[0] - b[0];});
        series.push({name: serverData[i]['name'], data: cleanedData})
      }
      $('#poll-response-rate-graph-gender').highcharts({
        chart: {
            type: 'column'
        },
        title: {
            text: null
        },
        xAxis: {
            type: 'datetime',
            dateTimeLabelFormats: {
              month: '%b %Y',
              year: '%Y'
            },
        },
        yAxis: {
            title: {
                text: null
            },
            min: 0
        },
        tooltip: {
            headerFormat: '<b>{series.name}</b><br>',
            pointFormat: '{point.x: %b %Y}: {point.y}'
        },
    
        plotOptions: {
            spline: {
                marker: {
                    enabled: true
                }
            }
        },
        credits: {
          enabled: false
        },
    
        colors: ['#6CF', '#39F', '#06C', '#036', '#000'],
        series :series
     });
    });

    $("#poll-response-rate-graph").each(function() {
        var response_rates = {{ response_rate|safe}};

        var graphData = [];
        Object.keys(response_rates).forEach(function(key){
          graphData.push([Date.parse(key), response_rates[key]]);
        })
        graphData.sort(function(a,b){return a[0] - b[0];});

         $('#poll-response-rate-graph').highcharts({
              chart: {
                  type: 'spline'
              },
              title: {
                  text: null
              },
              xAxis: {
                  type: 'datetime',
                  dateTimeLabelFormats: {
                    month: '%b %Y',
                    year: '%Y'
                  },
              },
              yAxis: {
                  title: {
                      text: null
                  },
                  min: 0
              },
              tooltip: {
                  headerFormat: '<b>{series.name}</b><br>',
                  pointFormat: '{point.x: %b %Y}: {point.y:.1f}%'
              },
          
              plotOptions: {
                  spline: {
                      marker: {
                          enabled: true
                      }
                  }
              },
              credits: {
                enabled: false
              },
              colors: ['#6CF', '#39F', '#06C', '#036', '#000'],
              series :[
                {
                  name: "Response Rate",
                  data: graphData
                }
              ]
         });
    });


    $("#contact-activity-graph").each(function() {
        var contact_activities = {{ contact_activities|safe}};

        var graphData = [];
        Object.keys(contact_activities).forEach(function(key){
          graphData.push([Date.parse(key), contact_activities[key]]);
        })
        graphData.sort(function(a,b){return a[0] - b[0];});

         $('#contact-activity-graph').highcharts({
              chart: {
                  type: 'spline'
              },
              title: {
                  text: null
              },
              xAxis: {
                  type: 'datetime',
                  dateTimeLabelFormats: {
                    month: '%b %Y',
                    year: '%Y'
                  },
              },
              yAxis: {
                  title: {
                      text: null
                  },
                  min: 0
              },
              tooltip: {
                  headerFormat: '<b>{series.name}</b><br>',
                  pointFormat: '{point.x: %b %Y}: {point.y}'
              },
          
              plotOptions: {
                  spline: {
                      marker: {
                          enabled: true
                      }
                  }
              },
              credits: {
                enabled: false
              },
              colors: ['#6CF', '#39F', '#06C', '#036', '#000'],
              series :[
                {
                  name: "Active contacts",
                  data: graphData
                }
              ]
         });
    });

    $("#contact-activity-graph-gender").each(function() {
        var serverData = {{ contact_activities_gender|safe}};
        var series = [];
      for (i=0; i<serverData.length; i++) {
        data = serverData[i]['data']
        cleanedData = []
        Object.keys(data).forEach(function(key){
          cleanedData.push([Date.parse(key), data[key]]);
        })
        cleanedData.sort(function(a,b){return a[0] - b[0];});
        series.push({name: serverData[i]['name'], data: cleanedData})
      }
         $('#contact-activity-graph-gender').highcharts({
              chart: {
                  type: 'column'
              },
              title: {
                  text: null
              },
              xAxis: {
                  type: 'datetime',
                  dateTimeLabelFormats: {
                    month: '%b %Y',
                    year: '%Y'
                  },
              },
              yAxis: {
                  title: {
                      text: null
                  },
                  min: 0
              },
              tooltip: {
                  headerFormat: '<b>{series.name}</b><br>',
                  pointFormat: '{point.x: %b %Y}: {point.y}'
              },
          
              plotOptions: {
                  spline: {
                      marker: {
                          enabled: true
                      }
                  }
              },
              credits: {
                enabled: false
              },
              colors: ['#6CF', '#39F', '#06C', '#036', '#000'],
              series : series
         });
    });

    $("#contact-activity-graph-age").each(function() {
        var serverData = {{ contact_activities_age|safe}};
        var series = [];
      for (i=0; i<serverData.length; i++) {
        data = serverData[i]['data']
        cleanedData = []
        Object.keys(data).forEach(function(key){
          cleanedData.push([Date.parse(key), data[key]]);
        })
        cleanedData.sort(function(a,b){return a[0] - b[0];});
        series.push({name: serverData[i]['name'], data: cleanedData})
      }
         $('#contact-activity-graph-age').highcharts({
              chart: {
                  type: 'column'
              },
              title: {
                  text: null
              },
              xAxis: {
                  type: 'datetime',
                  dateTimeLabelFormats: {
                    month: '%b %Y',
                    year: '%Y'
                  },
              },
              yAxis: {
                  title: {
                      text: null
                  },
                  min: 0
              },
              tooltip: {
                  headerFormat: '<b>{series.name}</b><br>',
                  pointFormat: '{point.x: %b %Y}: {point.y}'
              },
          
              plotOptions: {
                  spline: {
                      marker: {
                          enabled: true
                      }
                  }
              },
              credits: {
                enabled: false
              },
              colors: ['#E3002B', '#050E28', '#FFD100', '#40B5E5', '#FF8200', '#009917'],
              series : series
         });
    });

    $("#age-chart").each(function(){

           var data = {{ age_stats|safe }};

           {% if is_rtl_org %}
           data.reverse();
           {% endif %}

           var categories = [];

           for (i=0; i<data.length; i++) {
             categories.push(data[i].name)
           }

           $('#age-chart').highcharts({
             chart: {
               type: 'column',
               backgroundColor: "#000",
               spacing: [ 3, 5, 3, 5],
               height: "30%",
             },
             credits: {
               enabled: false
             },
             legend: {
               enabled: false
             },
             title: {
                 text: null
             },
             subtitle: {
                 text: null
             },
             xAxis: {
               categories: categories,
               labels : {
                   rotation: 0,
                   style: {
                     fontSize: 20,
                     fontFamily: "SharpSansDisplayBold",
                     color: "#FED200",
                 }
               },
               minorTickLength: 0,
               tickLength: 0
             },
             yAxis: {
               min: 0,
               labels: {
                 enabled: false
               },
               visible: false,
               gridLineWidth: 0,
               title: {
                 text: null
               }
             },
             tooltip: {
               enabled: false
             },
             plotOptions: {
                 column: {
                     color: '#FFF',
                     pointPadding: 0.2,
                     pointWidth: 30,
                     borderWidth: 0,
                     dataLabels:  {
                       enabled: true,
                       style: {
                         fontFamily: "SharpSansDisplayBold",
                       },
                       color: "#FFF",
                       verticalAlign:"bottom",
                       format: '<b>{point.y:.0f}%</b>'
                     }
                 }
             },
             series: [ {name: 'Age' , data: data } ]
           });
         });


    $(function(){
      $(".contact-field-graph-age").each(function(){
        var data = {{age_stats|safe}};

        {% if is_rtl_org %}
        data.reverse();
        {% endif %}

        var categories = [];
        for (var i=0; i<data.length; i++) {
          categories.push(data[i].name);
        }

        $('#graph-contact-field-age-placeholder').hide();
        $('#graph-contact-field-age').highcharts({
          chart: {
              type: 'column'
          },
          credits: {
            enabled: false
          },
          legend: {
            enabled: false
          },
          title: {
              text: null
          },
          subtitle: {
              text: null
          },
          xAxis: {
            categories: categories,
            labels : {
                style : {
                  color:'{{ org|config:"primary_color" }}',
                  fontFamily: "UreportSmallTextFont",
                  fontSize: 14
                },
                rotation: 0
            },
            minorTickLength: 0,
            tickLength: 0
          },
          yAxis: {
              min: 0,
              title: {
                  style : {
                    color:'{{ org|config:"primary_color" }}'
                  },
                  text: '(%)'
              },
              labels: {
                style : {
                  color:'{{ org|config:"primary_color" }}',
                  fontFamily: "UreportSmallTextFont",
                  fontSize: 14
                }
              }
          },
          tooltip: {
            headerFormat: '<span style="font-size:10px">{point.x}</span><table>',
            pointFormat: '<tr><td style="padding:0"><b>{point.y}</b></td></tr>',
            footerFormat: '</table>',
            shared: true,
            useHTML: true
          },
          plotOptions: {
            column: {
              color: '{{ org|config:"primary_color"}}',
              pointPadding: 0.2,
              borderWidth: 0,
              dataLabels:  {
                enabled: true,
                style : {
                      fontFamily: "UreportHeadlineFont",
                },
                format: '<b>{point.y:.0f}%</b>'
              }
            }
          },
          series: [ {name: 'Age' , data: data} ]
        });
      });
    });



    $(function(){
      $(".contact-field-graph-registration").each(function(){

        var results = {{ registration_stats|safe }};
        var categories = [];
        var data = [];

        var months = {{months|safe}};

        for (i=0; i<results.length; i++){
          category = results[i];
          label = Date.parse(category.label);
          categories.push(label);

          data.push({ name:label,  y: category.count })
        }

        {% if is_rtl_org %}
        data.reverse();
        categories.reverse();
        {% endif %}


        $('#graph-contact-field-registration-placeholder').hide();
        $('#graph-contact-field-registration').highcharts({
          chart: {
              type: 'area'
          },
          credits: {
            enabled: false
          },
          legend: {
            enabled: false
          },
          title: {
              text: null
          },
          subtitle: {
              text: null
          },
          xAxis: {
            categories: categories,
            type: 'datetime',
            labels : {
                style : {
                  color:'{{ org|config:"primary_color" }}',
                  fontFamily: "UreportSmallTextFont",
                  fontSize: 14
                },
                step: 4,
                formatter: function () {
                  // this.value is a Monday and Thursdays seems a better Month estimation day!!
                  return months[ new Date(new Date(this.value).setDate(new Date(this.value).getDate() + 3)).getMonth()];
                }
            }
          },
          yAxis: {
              min: 0,
              gridLineColor: '{{ org|config:"primary_color" }}',
              gridLineWidth: 0.3,
              labels: {
                style: {
                  color:'{{ org|config:"primary_color" }}',
                  fontFamily: "UreportSmallTextFont",
                  fontSize: 14
                  }
              },
              title: {
                  text: "{% trans "Registered" %}",
                  offset: 0,
                  x: -60,
                  y: 30,
                  align: 'low',
                  rotation: 0,
                  style: {
                     color:'{{ org|config:"primary_color" }}',
                     fontFamily: "UreportSmallTextFont",
                     fontSize: 14
                  }
              }
          },
          tooltip: {
              formatter: function() {
                   return '<table><tr><td style="padding:0; font-size: 24px; font-family:UreportHeadlineFont; "><b>'+ this.y + '</b></td></tr></table><span style="font-size:14px; font-family:UreportSmallTextFont">({% trans "Week of" %} ' + Highcharts.dateFormat('%e/%m', this.x) +')</span>';
              },
              shared: true,
              useHTML: true
          },
          plotOptions: {
              area: {
                  color: '{{ org|config:"primary_color"}}',
                  fillOpacity: 0.2,
                  pointPadding: 0.1,
                  borderWidth: 0
              }
          },
          series: [ {name: 'registration' , data: data } ]
        });
      });
    });

    {% if show_occupation_stats %}
    $(function() {
      $(".contact-field-graph-occupation").each(function(){

          var result = {{occupation_stats|safe}};

          if(!result){
            return;
          }

          var data = [];
          var categories = [];

          if (result){
            var results = result[0];
            var total = 0;
            for (i=0; i<result.length; i++){
              category = result[i];
              total += category.count;
            }

            var percentage_lookup = {};

            for (i=0; i<result.length; i++){
              category = result[i];
              label = category.label.trim();
              categories.push('');
              categories.push(label);

              percentage = (category.count == 0) ? 0 : category.count * 100 / total;
              percentage_lookup[label] = Math.round(percentage);

              data.push({ name:"", y: 0});
              data.push({ name:label,  y: Math.round(percentage) });
            }
          }

          {% if is_rtl_org %}
          data.reverse();
          categories.reverse();
          {% endif %}

          $('#graph-contact-field-occupation-placeholder').hide();
          $('#graph-contact-field-occupation').highcharts({
          chart: {
              type: 'areaspline',
              spacingTop: 75
          },
          credits: {
            enabled: false
          },
          legend: {
            enabled: false
          },
          title: {
              text: null
          },
          subtitle: {
              text: null
          },
          xAxis: {
            categories: categories,
            tickWidth: 0,
            labels : {
                enabled: false,
            }
          },
          yAxis: {
              min: 0,
              gridLineWidth: 0,
              labels: {
                enabled: false
              },
              title: {
                  text: null
              }
          },
          tooltip: {
              enabled: false
          },
          plotOptions: {
              areaspline: {
                  color: '{{ org|config:"primary_color"}}',
                  fillOpacity: 1,
                  pointPadding: 0.1,
                  borderWidth: 0,
                  marker: {
                    enabled: false,
                    states: {
                      hover: {
                        enabled: false
                      }
                    }
                  },
                  dataLabels: {
                    enabled: true,
                    useHTML: true,
                    y: 3,
                    crop: false,
                    overflow: "none",
                    formatter: function() {
                      if (this.y > 0) {
                      return '<div style="font-family: UreportHeadlineFont;text-align: center; width: 80px; line-height: 100%; font-size: 24px;color:{{ org|config:"primary_color"}};">'+ this.y + '%</div><div style="text-align:center; width: 80px; line-height: 120%; font-size: 14px; font-family:UreportSmallTextFont; white-space: normal;">' + this.x + '</div><div style="height: 35px;width: 2px;margin-left: auto;margin-right: auto; border-left: 1px solid; border-color:{{ org|config:"primary_color"}};"></div>'

                      }
                      else return '';
                    }
                  }
              }
          },
          series: [ {name: null , data: data } ]
          });
        });
      });
    {% endif %}

- block extra-style
  - load_qbs request.org 'ureporters'
  {{ block.super }}
  :css
    .highcharts-background {
      fill: transparent;
    }
   
   .hero-container {
      {% for d_block in ureporters|slice:":1" %}
      {% thumbnail d_block.image "1280x678" crop="top" as im %}
        background-image:url('{{im.url}}');
      {% empty %}
        background-image: url('{{ STATIC_URL }}img/missing_image_placeholder.jpg');
      {% endthumbnail %}
      {% endfor %}
    }
    .ureport-location-map  {
      height: 500px;
      width: 100%;
    }

    .ureport-location-map svg {
      height: 480px;
    }

    .leaflet-container {
      background: #fff;
    }

    .top-color {
      color: {{ org|config:"primary_color"}};
    }

    #graph-contact-field-age {
      height: 200px;
    }

    #graph-contact-field-gender {
      height: 200px;
    }

    #graph-contact-field-age-placeholder {
      min-height: 200px;
      padding-top: 50px;
    }

    .scale {
      {% if org|config:"is_global" %}
      display: none;
      {% endif %}
    }