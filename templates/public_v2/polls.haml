- extends "public_base_v2.html"

-load compress thumbnail humanize ureport i18n


- block content
  .booklet-bg
    .page-title-block.block-content
      .columns
        .column.page-title
          Opinions
        .column.categories-dropdown
          .dropdown.is-right
            .dropdown-trigger
              .button
                .dropdown-text
                  %span
                    BROWSE CATEGORIES
                  %span.icon.is-small
                    %i.fas.fa-angle-down(aria-hidden="true")
            
            .dropdown-menu.poll-overlay
              .dropdown-content
                .dropdown-item
                  .menu
                    %ul.menu-list
                      - for category in categories
                        %li.polls-category
                          %a
                            {{ category.name }} ({{category.polls.all|length}} polls)
                          %ul.menu-list.menu-list-polls
                            - if not category.polls.all|length
                              %li.has-background-warning
                                -trans "No polls yet for this category"
                            - for poll in category.polls.all
                              %li
                                %a(href="{% url 'v2.public.opinion_read' poll.id %}")
                                  {{poll.title }} 

  .poll-title-block.block-content
    .columns
      .column.is-half.questions-count
        {% blocktrans count questions=latest_poll.get_questions|length %}
          {{ questions }} question
        {% plural %}
          {{ questions }} questions
        {% endblocktrans %}
      .column.is-half.has-text-right
        .recent-results.is-inline-block
          Recent Poll Results
        .poll-category.is-inline-block
          {{ latest_poll.category.name|upper }}
    .columns
      .column.is-half.poll-title
        {{ latest_poll.title }}
      .column.is-half.has-text-right
        .poll-stats
          .responses-count.is-inline-block.has-text-centered
            .number-figure
              {{ latest_poll.responded_runs|intcomma }}
            .number-label
              - trans "RESPONSES"
          .responses-percentage.is-inline-block.has-text-centered
            .number-figure
              {{ latest_poll.response_percentage }}
            .number-label
              - trans "RESPONSE RATE"
  - for question in latest_poll.get_questions
    .columns.is-paddingless.is-marginless.poll-question-block
        - if not forloop.counter|divisibleby:2
          .column.is-half.block-content(class="for{{ forloop.counter0}}")
            .columns.is-multiline
              .column.is-1.question-number
                {{ forloop.counter }}
              .column
                .question-line
              .column.is-full.question-title
                {{ question.title }}
              .column.is-full.left-zone
                {% blocktrans with responded=question.get_responded|intcomma polled=question.get_polled|intcomma %}
                  {{ responded }} responded out of {{ polled }} polled
                {% endblocktrans %}

        .column.is-half.block-content
          .columns
            .column
              .is-small
                -trans "FILTER BY:"
              .tabs.is-boxed
                %ul
                  - if question.is_open_ended
                    %li.is-active(data-tab='keywords-chart-{{question.id}}')
                      %a
                        -trans "Keywords"
                  - else
                    %li.is-active(data-tab='all-chart-{{question.id}}')
                      %a
                        -trans "ALL"
                    %li(data-tab='age-chart-{{question.id}}')
                      %a
                        -trans "AGE"
                    %li(data-tab='gender-chart-{{question.id}}')
                      %a
                        -trans "GENDER"
                    %li(data-tab='map-chart-{{question.id}}')
                      %a
                        -trans "LOCATION"
              .tabs-content
                - if question.is_open_ended
                  .tab-content.is-active(data-content='keywords-chart-{{question.id}}')
                    .poll-question-graph-keywords(id="graph-keywords-question-{{question.id}}" data-question="{{question.id}}")
        
                -else
                  .tab-content.is-active(data-content='all-chart-{{question.id}}')
                    .poll-question-graph-all(id="graph-all-question-{{question.id}}" data-question="{{question.id}}")
                  .tab-content(data-content='age-chart-{{question.id}}')
                    .poll-question-graph-age(id="graph-age-question-{{question.id}}" data-question="{{question.id}}")
                  .tab-content(data-content='gender-chart-{{question.id}}')
                    .poll-question-graph-gender(id="graph-gender-question-{{question.id}}" data-question="{{question.id}}")
                  .tab-content(data-content='map-chart-{{question.id}}')
                    .poll-map{ data-question: "{{ question.id }}", id: "map-{{ question.id }}" }
                      .loading-placeholder{id:"map-{{ question.id }}-placeholder"}
                          %img{src:"{{ STATIC_URL }}img/loading.gif"}
        
        - if forloop.counter|divisibleby:2
          .column.is-half.block-content(class="for{{ forloop.counter0}}")
            .columns.is-multiline
              .column
                .question-line
              .column.is-1.question-number
                {{ forloop.counter }}
              .column.is-full.question-title
                {{ question.title }}
              .column.is-full.right-zone
                {% blocktrans with responded=question.get_responded|intcomma polled=question.get_polled|intcomma %}
                  {{ responded }} responded out of {{ polled }} polled
                {% endblocktrans %}

- block rsrs
  - for story in main_stories|slice:"1"
    .poll-story-title-block
      .columns.is-multiline.booklet-bg.block-content
        .column.is-10
          .recent-results.is-inline-block
            Recent Poll Results
        .column.is-2
          <img width="50%" src="{{ STATIC_URL }}img/medium-u-white.png" />
        .column.is-full.poll-story-title-text
          {{ story.title }}
        .column.is-full.poll-story-date
          {{ story.created_on|date:"M j. Y" }}
        -if story.get_written_by
          .column.is-full.poll-story-author
            - trans "BY"
            {{ story.get_written_by|upper }}
      
      .block-content
        .columns.is-multiline.poll-story-block
          .column.is-full
            {{ story.content|safe }}  

        - if latest_poll
          .columns.is-multiline.poll-story-block
            .column.is-full
              .fb-comments(data-href="{% org_host_link %}{% url 'v2.public.opinion_read' latest_poll.pk %}" data-width="100%" data-numposts="5")


- block extra-style
  {{ block.super }}

  :css
    .hero-container {
      {% if latest_poll %}
      {% thumbnail latest_poll.get_category_image "1280x678" crop="top" as im %}
        background-image:url('{{im.url}}');
      {% empty %}
        background-image: url('{{ STATIC_URL }}img/missing_image_placeholder.jpg');
      {% endthumbnail %}
      {% endif%}
    }

    .hero-small-background {
      {% if latest_poll %}
      {% thumbnail latest_poll.get_category_image "768x508" crop="top" as im %}
        background-image:url('{{im.url}}');
      {% empty %}
        background-image: url('{{ STATIC_URL }}img/missing_image_placeholder.jpg');
      {% endthumbnail %}
      {% endif%}
    }

    .poll-map {
      height: 500px;
      width: 100%;
    }

    .poll-map svg {
      height: 480px;
    }

    .leaflet-container {
      background: #fff;
    }

    .top-color {
      color: rgb(0,104,55);
    }

    .other-color {
      color: rgb(165,0,38);
    }

    .poll-word-cloud {
      width: 100%;
      min-height: 750px;
    }

    .scale {
      {% if org|config:"is_global" %}
      display: none;
      {% endif %}
    }

-block extra-script
  {{ block.super }}
  <script src="{{ STATIC_URL }}js/jqcloud.min.js"></script>
  {% compress js %}
  <script type="text/coffeescript" src="{{ STATIC_URL }}coffee/locations.coffee" />
  <script type="text/coffeescript" src="{{ STATIC_URL }}coffee/all_polls.coffee" />
  {% endcompress %}

  {% include "public/strings_values.html" %}
  :javascript
    $(".polls-category").on('click', function() {
      $(this).siblings().removeClass('is-active');
      $(this).addClass('is-active');
    });

    $(".dropdown-trigger").on('click', function() {
      $('.polls-category').removeClass('is-active');
      $(this).siblings('.dropdown-menu').toggleClass('is-active');
    });


    $(function(){
      $(".poll-question-graph-all").each(function(){
        var question = $(this).attr("data-question");
        $.ajax({url:'/pollquestion/' + question + '/results/', dataType: "json"}).done(function(result){

          if(!result){
            return;
          }

          var results = result[0];

          var categories = [];
          var data = [];
          var colors = ["#7cb5ec", "#434348", "#90ed7d", "#f7a35c", "#8085e9", "#f15c80", "#e4d354", "#2b908f", "#f45b5b", "#91e8e1"];


          if (results.categories.length > 0) {
          var total = 0;
          for (i=0; i<results.categories.length; i++){
            category = results.categories[i];
            total += category.count;
          }
          var percentage_lookup = {};
          for (i=0; i<results.categories.length; i++){
            category = results.categories[i];
            label = category.label.trim().toUpperCase();
            categories.push(label);
            percentage = (category.count == 0) ? 0 : category.count * 100 / total;
            percentage_lookup[label] = Math.round(percentage);
            if (parseInt(percentage_lookup[label])) {
              data.push({y: percentage, color: colors[i%colors.length]});
            }
          }
          } 

          Highcharts.chart('graph-all-question-' + question, {
            chart: {
              type: 'bar'
            },
            title: {
              text: null,
            },
            xAxis: {
              categories: categories,
              title: {
                text: null
              },
              labels: {
                enabled: false,
              }
            },
            yAxis: {
              min: 0,
              visible: false,
              title: {
                text: null,
              },
              labels: {
                enabled: false,
              }
            },
            tooltip: {
            },
            plotOptions: {
              bar: {
                dataLabels: {
                  enabled: true,
                  inside: true,
                  align: "left",
                  formatter: function() {
                    return this.x
                  }

                }
              }
            },
            legend: {
              enabled: false,
              layout: 'vertical',
              align: 'right',
              verticalAlign: 'top',
              x: -40,
              y: 80,
              floating: true,
              borderWidth: 1,
              backgroundColor: ((Highcharts.theme && Highcharts.theme.legendBackgroundColor) || '#FFFFFF'),
              shadow: true
            },
            credits: {
              enabled: false
            },
            series: [{
              data: data,
            }]
          });
          
        });
      });
  
      $(".poll-question-graph-gender").each(function(){
        var question = $(this).attr("data-question");
        var segment = {"gender": "Gender"}
        $.ajax({url:'/pollquestion/' + question + '/results/?segment=' + encodeURIComponent(JSON.stringify(segment)), dataType: "json"}).done(function(result){

          if(!result){
            return;
          }

          var results = result;
          var genders = [];
          var colors = ["#3FB5E5", "#FF8200", "#009316"];

          var categories_by_gender = {}
          var total_by_catedory = {};
          
          for (i=0; i<results.length; i++){
            result = results[i];
            gender = result.label;
            genders.push(gender);
            for (j=0; j<result.categories.length; j++){
              category = result.categories[j];
              label = category.label.trim().toUpperCase();
              if(!(label in categories_by_gender)) {
                categories_by_gender[label] = {};
                total_by_catedory[label] = 0;
              }
              categories_by_gender[label][gender] = category.count;
              total_by_catedory[label] += category.count;
            }
          }

          var data_by_gender = {};
          for (i=0; i<genders.length; i++){
            gender = genders[i];
            data_by_gender[gender] = [];
          }
          var percentage_lookup = {};

          for (key in categories_by_gender) {
            percentage_lookup[key] = {}
            total_key = total_by_catedory[key];
            for (i=0; i<genders.length; i++){
              gender = genders[i];
              count = categories_by_gender[key][gender];

              percentage = (count == 0) ? 0 : count * 100 / total_key; 
              data_by_gender[gender].push(percentage);
            }
          }

          series = [];
          for (key in data_by_gender) {
            series.push({name: key, data: data_by_gender[key]})
          }

          Highcharts.chart('graph-gender-question-' + question, {
            chart: {
              type: 'column'
            },
            title: {
              text: null,
            },
            xAxis: {
              categories: Object.keys(categories_by_gender),
              crosshair: true
            },
            yAxis: {
              min: 0,
              max: 100,
              title: {
                text: null,
              }
            },
            tooltip: {
              headerFormat: '<span style="font-size:10px">{point.key}</span><table>',
              pointFormat: '<tr><td style="color:{series.color};padding:0">{series.name}: </td>' +
                '<td style="padding:0"><b>{point.y:.1f} mm</b></td></tr>',
              footerFormat: '</table>',
              shared: true,
              useHTML: true
            },
            colors: colors,
            plotOptions: {
              column: {
                pointPadding: 0.2,
                borderWidth: 0
              }
            },
            credits: {
              enabled: false
            },            
            series: series,
          });

        });
      });

      $(".poll-question-graph-age").each(function(){
        var question = $(this).attr("data-question");
        var segment = {"age": "Age"}
        $.ajax({url:'/pollquestion/' + question + '/results/?segment=' + encodeURIComponent(JSON.stringify(segment)), dataType: "json"}).done(function(result){

          if(!result){
            return;
          }

          var results = result;
          var genders = [];
          var colors = ["#E3002B", "#050E28", "#FED100", "#3FB5E5", "#FF8200", "#009316"];

          var categories_by_gender = {}
          var total_by_catedory = {};
          
          for (i=0; i<results.length; i++){
            result = results[i];
            gender = result.label;
            genders.push(gender);
            for (j=0; j<result.categories.length; j++){
              category = result.categories[j];
              label = category.label.trim().toUpperCase();
              if(!(label in categories_by_gender)) {
                categories_by_gender[label] = {};
                total_by_catedory[label] = 0;
              }
              categories_by_gender[label][gender] = category.count;
              total_by_catedory[label] += category.count;
            }
          }

          var data_by_gender = {};
          for (i=0; i<genders.length; i++){
            gender = genders[i];
            data_by_gender[gender] = [];
          }
          var percentage_lookup = {};

          for (key in categories_by_gender) {
            percentage_lookup[key] = {}
            total_key = total_by_catedory[key];
            for (i=0; i<genders.length; i++){
              gender = genders[i];
              count = categories_by_gender[key][gender];

              percentage = (count == 0) ? 0 : count * 100 / total_key; 
              data_by_gender[gender].push(percentage);
            }
          }

          series = [];
          for (key in data_by_gender) {
            series.push({name: key, data: data_by_gender[key]})
          }

          Highcharts.chart('graph-age-question-' + question, {
            chart: {
              type: 'column'
            },
            title: {
              text: null,
            },
            xAxis: {
              categories: Object.keys(categories_by_gender),
              crosshair: true
            },
            yAxis: {
              min: 0,
              max: 100,
              title: {
                text: null,
              }
            },
            tooltip: {
              headerFormat: '<span style="font-size:10px">{point.key}</span><table>',
              pointFormat: '<tr><td style="color:{series.color};padding:0">{series.name}: </td>' +
                '<td style="padding:0"><b>{point.y:.1f}%</b></td></tr>',
              footerFormat: '</table>',
              shared: true,
              useHTML: true
            },
            colors: colors,
            plotOptions: {
              column: {
                pointPadding: 0.2,
                borderWidth: 0
              }
            },
            credits: {
              enabled: false
            },            
            series: series,
          });
          
        });
      });
    });
    
    $(".poll-question-graph-keywords").each(function(){
      var question = $(this).attr("data-question");

      var question = $(this).attr("data-question");
      $.ajax({url:'/pollquestion/' + question + '/results/', dataType: "json"}).done(function(result){      
          if(!result){
            return;
          }

          var results = result[0];
          var total = 0;
          var data = [];
          var colors = gradientFactory.generate({
            from: '#DDDDDD',
            to: '{{ org|config:"primary_color"}}',
            stops: 10
          });
          
          if (results.categories.length > 0) {
            for (i=0; i<results.categories.length; i++){
              category = results.categories[i];
              total += category.count;
            }
            var percentage_lookup = {};
            for (i=0; i<results.categories.length; i++){
              category = results.categories[i];
              label = category.label.trim().toUpperCase();
              percentage = (category.count == 0) ? 0 : category.count * 100 / total;
              percentage_lookup[label] = Math.round(percentage);
              if (parseInt(percentage_lookup[label])) {
                console.log(percentage);
                data.push({name: label, value: percentage, color: colors[Math.min(9, Math.floor(percentage/1.5))]})
              } 
            }
          }
          console.log(data);



          Highcharts.chart('graph-keywords-question-' + question, {
            chart: {
              type: 'packedbubble',
              height: '100%'
            },
            title: {
              text: null,
            },
            tooltip: {
              useHTML: true,
              pointFormat: '<b>{point.name}:</b> {point.y}m CO<sub>2</sub>'
            },
            legend: {
              enabled: false,
            },
            plotOptions: {
              packedbubble: {
                minSize: '20',
                maxSize: '400',
                zMin: 0,
                zMax: 100,
                dataLabels: {
                  enabled: true,
                  format: '{point.name}',
                  style: {
                    color: 'black',
                    textOutline: 'none',
                    fontWeight: 'normal'
                  }
                }
              }
            },
            credits: {
              enabled: false
            },
            series: [{
              data: data
            }]
        });
      });
    });

    $(function(){

      $(".poll-question-tab").on('click', function (){
        $(this).parent('.poll-question-tabs').children('.poll-question-tab').removeClass('active');
        $(this).parent('.poll-question-tabs').children('.poll-question-tab').children('a').removeClass('primary-bg-color')
        $(this).parent('.poll-question-tabs').children('.poll-question-tab').children('a').addClass('primary-color')

        $(this).addClass('active');
        $(this).children('a').removeClass('primary-color');
        $(this).children('a').addClass('primary-bg-color');
      });

      $(".poll-question-tab").on('shown.bs.tab', function(e) {
         var tabPaneShown = e.target.getAttribute('href');
         var mapDiv = $(tabPaneShown).children('.poll-map');

         if (mapDiv.length) {
            var map = mapDiv.data('map');
            map.invalidateSize(false);
         }
      });


      $.ajax({url:'/boundaries/', dataType: "json"}).done(function(boundaries){
        $(".poll-map").each(function(){
          var question = $(this).attr("data-question");
          var colorList = {{ colors_map|safe }};
          var map = window.initMap('map-' + question, boundaries, question, '{{ district_zoom|lower }}' === 'true', '{{ ward_zoom|lower }}' === 'true', colorList=colorList);

          $(this).data('map', map);
        });
      });

      $(".poll-word-cloud").each(function(){
        var question = $(this).attr("data-question");
        $.ajax({url:'/pollquestion/' + question + '/results/', dataType: "json"}).done(function(result){

          if(!result){
            return;
          }

          var results = result[0];
          var cloudData = [];

          for (i=0; i<=25 && i<=results.categories.length; i++){
            word = results.categories[i];
            if (word){
              label = word.label.trim().toUpperCase();
              cloudData.push({ text: label, weight: Math.sqrt(word.count)})
            }
          }

          $('#word-cloud-' + question + '-placeholder').hide();
          $('#word-cloud-' + question).jQCloud(cloudData);

        });
      });
    });
