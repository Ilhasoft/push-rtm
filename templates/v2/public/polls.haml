- extends "public_base_v2.html"

- load compress thumbnail humanize ureport i18n

- block content
  .bg-grid.border-t.p-home(class="md:flex")
    .flex-1.flex-center-y
      .text-5xl.font-bold
        -trans "Opinions"
      .text-xl.max-w-lg
        -trans "A sentence that describes what this page is all about and who it is for"

    .flex-center-y
      .block.text-right.mt-4
        .inline-block.bg-black.text-white.text-lg.px-4.py-2.rounded
          .inline-block.bg-black.border-b.border-white
            %input.bg-black.search-box(type="text" data-results-id="poll-search-results" placeholder="SEARCH" size=14)
            %a.search-close(href="#")
              %i.fa.fa-caret-down

      .relative
        .absolute.right-0.bg-white.search-results.h-64.border(id="poll-search-results" style="z-index:100000")
          .no-results.p-4.italic.hidden
            -trans "No results found"

          {% for category in categories %}
          {% if category.polls.all %}
          .block.py-4.bg-white.search-category
            %a.font-bold.px-4.block(href="#")
              %i.fa.fa-caret-right.closed.float-left(style="padding-top:2px")
              %i.fa.fa-caret-down.hidden.open.float-left(style="padding-top:4px")
              .pl-3
                {{ category.name }}
            .category-results
              {% for poll in category.polls.all %}
              %a.block.px-4.py-1.searchable(class="hover:bg-gray-200" href="{% url 'v2.public.opinion_read' poll.pk %}" data-search-value="{{ poll.title|addslashes }}")
                .ml-4
                  {{ poll.title }}
              {% endfor %}
          {% endif %}
          {% endfor %}


  .bg-white.border-t(class="md:flex")
    .flex-1.my-home.border-r
      .px-home
        .bg-dark2.inline-block.px-4.py-2.uppercase.leading-none.font-bold.text-sm.text-white
          {{ latest_poll.category.name }}

        .text-5xl.font-bold.leading-tight
          {{ latest_poll.title }}

        .block
          {{ latest_poll.poll_date|date:"F jS, Y" }}

        .font-light.mt-4
          .inline-block.pr-8.border-r.border-black
            .text-5xl.leading-none
              {{ latest_poll.responded_runs|intcomma }}
            .text-xs.font-bold
              -trans "RESPONSES"

          .inline-block.pl-8
            .text-5xl.leading-none
              {{ latest_poll.response_percentage }}
            .text-xs.font-bold
              -trans "RESPONSE RATE"

        .mt-4.flex
          .flex-none.mr-8
            .text-center.inline-block.pr-4
              %img(src="{{ STATIC_URL }}img/gender-male.png" width="40")
              .font-bold.text-xl.leading-none.mt-2
                {{gender_stats.male.percentage|default:"0"}}%
              .text-sm.leading-none
                {{gender_stats.male.count|default:"0"|intcomma}}

            .text-center.inline-block.px-4.border-l.border-black
              %img(src="{{ STATIC_URL }}img/gender-female.png" width="40")
              .font-bold.text-xl.leading-none.mt-2
                {{gender_stats.female.percentage|default:"0"}}%
              .text-sm.leading-none
                {{gender_stats.female.count|default:"0"|intcomma}}

            - if org|config:"has_extra_gender"
              .text-center.inline-block.px-4.border-l.border-black
                %img(src="{{ STATIC_URL }}img/gender-other.png" width="40")
                .font-bold.text-xl.leading-none.mt-2
                  {{gender_stats.other.percentage|default:"0"}}%
                .text-sm.leading-none
                  {{gender_stats.other.count|default:"0"|intcomma}}

          .flex-1.inline-block(style="min-width:220px;max-width:350px")
            .relative.w-full(style="height:105px")
              {{ age_stats|json_script:"age_stats" }}
              #age-bars.w-full.h-full.absolute.age-chart(data-bar-color='{{ org|config:"primary_color"}}' data-label-color="black" data-stats="age_stats")

    .flex-1.text-black
      .pl-6.pr-home.py-home.text-center
        .text-sm.font-bold.mb-2
          -trans "TOTAL RESPONSES"
        {% with map_segment='{"location":"state"}' %}
        #poll-map.h-full.w-full.map(data-map-url="/pollquestion/{{ top_question.id }}/results/?segment={{ map_segment|urlencode }}")
          .block(style="min-height:300px;min-width:300px;")
        {% endwith %}

  {% for question in latest_poll.get_questions %}
  .block(class="md:flex {% cycle '' 'md:flex-row-reverse' %}" data-aos="fade" style="min-height:30rem;")
    .flex-1(class="{% cycle 'bg-dark1 text-white' 'bg-light1 text-black' 'bg-dark2 text-white' 'bg-dark3 text-black' as bg %}")
      .p-home
        .flex(class="{% cycle '' 'md:flex-row-reverse' as reverse %}")
          .flex-none.bg-circle.bg-black.text-white.font-bold
            {{ forloop.counter }}
          .flex-1.flex-center-y
            .h-1.border-t(class="{% cycle 'ml-4' 'mr-4' as margin %} {% cycle 'border-white' 'border-black' 'border-white' 'border-white' as border %}")

        .mt-8
          .font-alt.text-3xl.font-bold.leading-tight.italic
            {{ question.title }}

          .font-alt.mt-4
            {% blocktrans with responded=question.get_responded|intcomma polled=question.get_polled|intcomma %}
              {{ responded }} responded out of {{ polled }} polled
            {% endblocktrans %}

    .flex-1.bg-white.text-black.hover-parent
      .mx-home.py-home.hover-parent(class="md:border-t")
        .block.justify-between.flex.flex-wrap.hover-parent
          {% if not question.is_open_ended %}
          .text-xs.flex-none.mb-4
            %a.pill-first.pill-white.selected.segment-pill(href='#' data-question="{{question.id}}" data-segment="all")>
              -trans "ALL"
            %a.pill.pill-white.segment-pill(href='#' data-question="{{question.id}}" data-segment="age")>
              -trans "AGE"
            %a.pill.pill-white.segment-pill(href='#' data-question="{{question.id}}" data-segment="gender")>
              -trans "GENDER"
            %a.pill-last.pill-white.segment-pill.relative.state-pill(href='#' data-question="{{question.id}}" data-segment="state")>
              -trans "STATE"
              %i.fa.fa-caret-down
              .state-dropdown.absolute.z-50(id="states-{{question.id}}" style="margin-left:-1px")
                .border.border-gray-400.text-left.bg-white.h-64(style="overflow-y:scroll;margin-top:.5rem;margin-left:-1rem;")
                  .pt-1.text-black
                    {% for state in states %}
                    .pl-2.pr-4.py-1.state-segment(data-state='{{state.id}}' data-question="{{question.id}}" class="hover:bg-gray-200 {% if forloop.counter0 < 3 %}selected{% endif %}")
                      .checkbox.float-left
                        %i.fa.fa-check
                      .ml-4.whitespace-no-wrap
                        {{ state.name }}
                    {% endfor %}

          {% else %}
          .block
          {% endif %}

          .share.float-right.flex-none.mb-4.flex-center-y.hover-show
            .block
              %a.bg-circle-xs.border.border-black.facebook-share(href="" data-url="{% org_host_link %}{% url 'v2.public.opinion_read' latest_poll.pk %}#question-id-{{question.id}}")
                %i.fa.fa-facebook
              %a.bg-circle-xs.border.border-black(href="https://twitter.com/intent/tweet?url={% org_host_link %}{% url 'v2.public.opinion_read' latest_poll.pk %}#question-id-{{question.id}}")
                %i.fa.fa-twitter
              %a.bg-circle-xs.border.border-black(href="https://api.whatsapp.com/send?text={% org_host_link %}{% url 'v2.public.opinion_read' latest_poll.pk %}#question-id-{{question.id}}")
                %i.fa.fa-whatsapp
              %a.bg-circle-xs.border.border-black(href="mailto:?subject=Check out {{ poll.title|urlencode:\"\" }} results&amp;body=Check out the results for U-Report poll on {% org_host_link %}{% url 'v2.public.opinion_read' latest_poll.pk %}#question-id-{{question.id}}" uk-icon="icon: mail; ratio: 1.5")
                %i.fa.fa-envelope


        .relative.w-full(style="min-height:24rem;")
          .w-full.h-full.absolute.poll-chart.block(id="chart-{{ question.id }}" data-question="{{ question.id }}" data-segment="all")

  {% endfor %}

- block old-content

  - for question in latest_poll.get_questions
   .poll-question-block.uk-margin-remove(id="question-id-{{question.id}}" uk-grid)
       - if not forloop.counter|divisibleby:2
         .uk-width-1-2.block-content(class="for{{ forloop.counter0}}" uk-scrollspy="cls:uk-animation-fade; delay:500")
           .(uk-grid)
             .uk-width-auto.question-number
               {{ forloop.counter }}
             .uk-width-expand
               .question-line
             .uk-width-1-1.question-title
               {{ question.title }}
             .uk-width-1-1.left-zone
               {% blocktrans with responded=question.get_responded|intcomma polled=question.get_polled|intcomma %}
                 {{ responded }} responded out of {{ polled }} polled
               {% endblocktrans %}     
       .uk-width-1-2.block-content.animate-graph(uk-scrollspy="cls:uk-animation-fade; delay:500;" data-question="{{question.id}}")
         .(uk-grid)
          .uk-width-1-1
            %ul.uk-iconnav.social-sharing
              %li
                %a(uk-icon="icon: facebook; ratio: 1.5" href="" data-question="{{question.id}}" data-question-url="{% org_host_link %}{% url 'v2.public.opinion_read' latest_poll.pk %}#question-id-{{question.id}}")
              %li
                %a(uk-icon="icon: twitter; ratio: 1.5" href="https://twitter.com/intent/tweet?url={% org_host_link %}{% url 'v2.public.opinion_read' latest_poll.pk %}#question-id-{{question.id}}")
              %li
                %a(uk-icon="icon: whatsapp; ratio: 1.5" href="https://api.whatsapp.com/send?text={% org_host_link %}{% url 'v2.public.opinion_read' latest_poll.pk %}#question-id-{{question.id}}")
              %li
                %a(href="mailto:?subject=Check out {{ poll.title|urlencode:\"\" }} results&amp;body=Check out the results for U-Report poll on {% org_host_link %}{% url 'v2.public.opinion_read' latest_poll.pk %}#question-id-{{question.id}}" uk-icon="icon: mail; ratio: 1.5")


          .uk-width-1-1
            #polls-tab-buttons.uk-button-group(uk-switcher="animation: uk-animation-fade; toggle: > *; connect:#graph-tabs-{{question.id}}")
              - if question.is_open_ended
                %button.uk-button.uk-button-default.left-most.right-most
                  -trans "Keywords"
              -else
                %button.uk-button.uk-button-default.left-most
                  All
                %button.uk-button.uk-button-default
                  Age
                %button.uk-button.uk-button-default
                  Gender
                %button.uk-button.uk-button-default.right-most(id="states-dropdown-{{question.id}}" type="button")
                  State
                .uk-padding-remove(uk-dropdown="mode:click;" data-question="{{question.id}}")
                    %ul#states-selector.uk-list.uk-list-striped.uk-height-medium.uk-overflow-auto
                      - for state in states
                        %block.state-selector(data-location-id='{{state.id}}')
                          {{state.name}}
          .uk-width-1-1
            %ul.uk-switcher.graph-tabs(id="graph-tabs-{{question.id}}")
              - if question.is_open_ended
                %li.keywords-graph(id="keywords-tab-{{question.id}}")
                  .tab-content.is-active(data-content='keywords-chart-{{question.id}}')
                    .poll-question-graph-keywords(id="graph-keywords-question-{{question.id}}" data-question="{{question.id}}")
              -else
                %li.all-graph(id="all-tab-{{question.id}}")
                  .tab-content.is-active(data-content='all-chart-{{question.id}}')
                    .poll-question-graph-all.has-graph(id="graph-all-question-{{question.id}}" data-question="{{question.id}}")
                %li.age-graph(id="age-tab-{{question.id}}")
                  .tab-content.is-active(data-content='age-chart-{{question.id}}')
                    .poll-question-graph-age.has-graph(id="graph-age-question-{{question.id}}" data-question="{{question.id}}")
                %li.gender-graph(id="gender-tab-{{question.id}}")
                  .tab-content.is-active(data-content='gender-chart-{{question.id}}')
                    .poll-question-graph-gender.has-graph(id="graph-gender-question-{{question.id}}" data-question="{{question.id}}")
                  
                %li.locations-graph(id="locations-tab-{{question.id}}")
                  .tab-content.is-active(data-content='locations-chart-{{question.id}}')
                    .poll-question-graph-locations.has-graph(id="graph-locations-question-{{question.id}}" data-question="{{question.id}}")


       - if forloop.counter|divisibleby:2
         .uk-width-1-2.block-content(class="for{{ forloop.counter0}}" uk-scrollspy="cls:uk-animation-fade; delay:500;")
           .(uk-grid)
             .uk-width-expand
               .question-line
             .uk-width-auto.question-number
               {{ forloop.counter }}
             .uk-width-1-1.question-title
               {{ question.title }}
             .uk-width-1-1.right-zone
               {% blocktrans with responded=question.get_responded|intcomma polled=question.get_polled|intcomma %}
                 {{ responded }} responded out of {{ polled }} polled
               {% endblocktrans %}

  - for story in main_stories|slice:"1"  
    .booklet-bg
    .booklet-bg-content
      .content-color-bg
      .content-container-block
        .poll-story-block
          .(uk-grid)
            .uk-width-5-6
            .uk-width-1-6
              <img width="50%" src="{{ STATIC_URL }}img/medium-u-white.png" />
          .(uk-grid)
            .uk-width-1-1.poll-story-title-text
              {{ story.title }}

          .(uk-grid)
             .uk-width-1-1.poll-story-date
               {{ story.created_on|date:"M j. Y" }}
             -if story.get_written_by
               .uk-width-1-1.poll-story-author
                 - trans "BY"
                 {{ story.get_written_by|upper }}

             .uk-width-1-1.poll-story-text
               {{ story.content|safe }}

          - if latest_poll
            .(uk-grid)
              .uk-width-1-1(style="margin: 5rem 0 1rem 0;")
                .fb-comments(data-href="{% org_host_link %}{% url 'v2.public.opinion_read' latest_poll.pk %}" data-width="100%" data-numposts="5")

- block extra-style
  {{ block.super }}

  :css
    .hero-container {
      {% if latest_poll %}
      {% thumbnail latest_poll.get_category_image "1280x678" crop="top" as im %}
        background-image:url('{{im.url}}');
      {% empty %}
        background-image: url('{{ STATIC_URL }}img/missing_image_placeholder.jpg');
      {% endthumbnail %}
      {% endif%}
    }

    .hero-small-background {
      {% if latest_poll %}
      {% thumbnail latest_poll.get_category_image "768x508" crop="top" as im %}
        background-image:url('{{im.url}}');
      {% empty %}
        background-image: url('{{ STATIC_URL }}img/missing_image_placeholder.jpg');
      {% endthumbnail %}
      {% endif%}
    }

    .poll-map {
      height: 600px;
      width: 100%;
    }

    .poll-map svg {
      height: 600px;
    }

    .leaflet-container {
      background: #fff;
    }

    .top-color {
      color: rgb(0,104,55);
    }

    .other-color {
      color: rgb(165,0,38);
    }

    .poll-word-cloud {
      width: 100%;
      min-height: 750px;
    }

    .scale {
      {% if org|config:"is_global" %}
      display: none;
      {% endif %}
    }
    
    .map-title {
      font-size: 1.2rem;
      text-align: center;
      font-family: SharpSansDisplayBold, sans-serif;
      padding-top: 0.2rem
    }

    .leaflet-popup-content {
      margin: 0.5rem;
    }

    .leaflet-popup-content-wrapper {
      border-radius: 0;
    }

    .leaflet-popup-content-wrapper .popup-region-name {
      color: #FFF;
      font-size: 1.2rem;
      line-height: 1rem;
      font-variant-caps: all-small-caps;
    }

    .leaflet-popup-content-wrapper .popup-responses-number {
      color: #FF0;
      font-size: 1rem;
      line-height: 0.75rem;
      font-variant-caps: all-small-caps;
    }
    .leaflet-popup-content-wrapper, .leaflet-popup-tip {
      background-color: #000;
    }
    .leaflet-container a.leaflet-popup-close-button {
      display:none;
    }

    .legend {
      line-height: 12px;
      color: #555;
    }
    .legend i {
      width: 12px;
      height: 12px;
      float: left;
      margin-right: 5px;
      opacity: 0.7;
    }

    #states-selector .state-selector.is-selected {
      font-weight: bold;
      background-color: #333;
      color: #EEE;

    }

-block extra-script
  {{ block.super }}
  <script src="{{ STATIC_URL }}js/jqcloud.min.js"></script>
  <script src="{{ STATIC_URL }}js/html2canvas.min.js"></script>
  {% compress js %}
  <script type="text/coffeescript" src="{{ STATIC_URL }}coffee/locations_v2.coffee" />
  <script type="text/coffeescript" src="{{ STATIC_URL }}coffee/all_polls.coffee" />
  {% endcompress %}

  {% include "public/strings_values.html" %}
  :javascript
    $(".dropdown-trigger").on('click', function() {
      $(this).siblings('.dropdown-menu').toggleClass('is-active');
      $(this).toggleClass('rotation');
      $(".polls-category-list").addClass("uk-hidden");
      $("#search-input input").focus();
    });

    $(".state-selector").on('click', function(event) {
      event.stopPropagation();
      var locationIds = $(this).parent().children('.state-selector.is-selected').map(function() { return $(this).attr('data-location-id')}).get();
      
      if(locationIds.length < 5) {
        $(this).toggleClass('is-selected');
      } else if ($(this).hasClass('is-selected')) {
        $(this).removeClass('is-selected');
      } else {
        return
      }
      locationIds = $(this).parent().children('.state-selector.is-selected').map(function() { return $(this).attr('data-location-id')}).get();

      var question = $(this).parent().parent().attr("data-question");
      var results = Window.UreportStats["locations-" + question];

      var segments = [];
      var colors = ["#E3002B", "#050E28", "#FED100", "#3FB5E5", "#FF8200", "#009316"];
      var categories_by_segment = {};

      var locationsResults = [];
      for (i=0; i<results.length; i++){
        result = results[i];
        if(locationIds.includes(result.boundary)) {
          locationsResults.push(result);
        }
      }

      for (i=0; i<locationsResults.length; i++) {
        result = locationsResults[i];
        segment = result.label;
        if(locationIds.includes(result.boundary)) {
          segments.push(segment);
          for (j=0; j<result.categories.length; j++) {
            category = result.categories[j];
            label = category.label.trim().toUpperCase();
            if(!(label in categories_by_segment)) {
              categories_by_segment[label] = {};
            }
            categories_by_segment[label][segment] = (result.set == 0) ? 0 : category.count * 100 / result.set;
          }
        }
      }
      
      var data_by_segment = {};
      for (i=0; i<segments.length; i++){
        segment = segments[i];
        data_by_segment[segment] = [];
      }
      var percentage_lookup = {};
      for (key in categories_by_segment) {
        percentage_lookup[key] = {}
        for (i=0; i<segments.length; i++){
          segment = segments[i];
          count = categories_by_segment[key][segment];
          percentage = (count == 0) ? 0 : count; 
          data_by_segment[segment].push(percentage);
        }
      }
      series = [];
      for (key in data_by_segment) {
        series.push({name: key, data: data_by_segment[key]})
      }
      
      Highcharts.chart('graph-locations-question-' + question, {
        chart: {
          type: 'column'
        },
        title: {
          text: null,
        },
        xAxis: {
          categories: Object.keys(categories_by_segment),
          crosshair: true
        },
        yAxis: {
          min: 0,
          max: 100,
          title: {
            text: null,
          }
        },
        tooltip: {
          headerFormat: '<span style="font-size:10px">{point.key}</span><table>',
          pointFormat: '<tr><td style="color:{series.color};padding:0">{series.name}: </td>' +
            '<td style="padding:0"><b>{point.y:.1f}%</b></td></tr>',
          footerFormat: '</table>',
          shared: true,
          useHTML: true
        },
        plotOptions: {
          column: {
            pointPadding: 0.2,
            borderWidth: 0
          }
        },
        credits: {
          enabled: false
        },            
        series: series,
      });

      if($("#states-dropdown-" + question).hasClass('uk-open')) {
        $("#states-dropdown-" + question).addClass('uk-active')
      }
      $('#locations-tab-' + question).addClass('uk-active');
    
    });

    $(".facebook-share").on("click", function() {
      var question = $(this).attr("data-question");
      var questionURL = $(this).attr("data-question-url");
      var url = "https://www.facebook.com/sharer/sharer.php?u=" + questionURL;
      FB.ui(
        {
          method: "share",
          href: url
        }, 
        function(response) {
          console.log(response);
        }
      )
    });

    $("#age-chart").each(function(){
      var data = {{ age_stats|safe }};

      {% if is_rtl_org %}
      data.reverse();
      {% endif %}

      var categories = [];

      for (i=0; i<data.length; i++) {
        categories.push(data[i].name)
      }

      $('#age-chart').highcharts({
        chart: {
          type: 'column',
          backgroundColor: '{{ org|config:"primary_color" }}',
          spacing: [ 3, 5, 3, 5],
          height: "30%",
        },
        credits: {
          enabled: false
        },
        legend: {
          enabled: false
        },
        title: {
          text: null
        },
        subtitle: {
          text: null
        },
        xAxis: {
          categories: categories,
          labels : {
            rotation: 0,
            style: {
              fontSize: '0.85rem',
              fontFamily: "SharpSansDisplayBold",
              color: "#fff",
            }
          },
          minorTickLength: 0,
          tickLength: 0
        },
        yAxis: {
          min: 0,
          max: 100,
          labels: {
            enabled: false
          },
          visible: false,
          gridLineWidth: 0,
          title: {
            text: null
          }
        },
        tooltip: {
          enabled: false
        },
        plotOptions: {
          column: {
            color: '{{ org|config:"primary_color" }}',
            pointPadding: 0.2,
            pointWidth: 30,
            borderWidth: 0,
            dataLabels:  {
              enabled: true,
              style: {
                fontFamily: "SharpSansDisplayBold",
              },
              color: '#000000',
              verticalAlign:"bottom",
              format: '<b>{point.y:.0f}%</b>'
            }
          }
        },
        series: [ {name: 'Age' , data: data } ]
      });
    });



    $(".screenshot-capture").on("click", function() {
      var question = $(this).attr("data-question");
      $(".export-modal-progress").show();
      $(".export-modal-content").hide();
      $('.modal').toggleClass('is-active');
      var region = document.body.querySelector("#question-id-" + question);
      html2canvas(region).then(canvas => {
        var imgFile = canvas.toDataURL("image/png");
        $("img.screenshot-rendered").attr("src", imgFile);
        $("a.screenshot-link").attr("href", imgFile);
        $("a.screenshot-link").attr("download", "share-export-screenshot.png");
        $(".export-modal-progress").hide();
        $(".export-modal-content").show();
      });
    });


    $(document).ready(function() {
      $(document).mouseup(function (e){
        var container = $(".dropdown-menu, .dropdown-trigger");
        if (!container.is(e.target) && container.has(e.target).length === 0){
          container.removeClass('is-active');
          container.removeClass('rotation');
        }
      });

      $(".tabs ul li").on('click', function() {
        var tab = $(this).data('tab');
        $(this).parent().parent('.tabs').children().children('li').removeClass('is-active');

        $(this).addClass('is-active');
        $(this).parent().parent('.tabs').siblings(".tabs-content").children(".tab-content").removeClass('is-active');
        $('div[data-content="' + tab + '"]').addClass('is-active');

        var oldChart = $('div[data-content="' + tab + '"]').children('.has-highcharts').highcharts();
        if(oldChart) {
          var options = Object.assign(oldChart.options)
          var id = oldChart.renderTo.id;
          oldChart.destroy();
          Highcharts.chart(id, options);

        }

      });
    });

    $(".polls-category-label").on('click', function() {
      $(this).siblings('ul').toggleClass('uk-hidden');
      $(this).toggleClass('rotation')
      $(this).toggleClass('is-active')
    });

    function resetPolls() {
      $(".poll-list-item").removeClass("uk-hidden");
      $('.polls-category-label').removeClass('rotation');
      $(".polls-category").removeClass("uk-hidden");
      $(".polls-category").children('ul').addClass("uk-hidden");
      $(".no-results").addClass('uk-hidden');
    }

    $("#search-clear").on("click", function() {
      $(this).parent('#search-input').children('input').val("");
      resetPolls();
    });

    $("#search-input input").on('keyup', function() {
      var term = $(this).val().toLowerCase().trim();
      $(".polls-category").addClass("uk-hidden");
      $(".no-results").addClass('uk-hidden');
      if(!term) {
        $(".poll-list-item").removeClass("uk-hidden");
        resetPolls();
        return;
      } else {
        $(".poll-list-item").each( function() {

          if (!$(this).text().trim().toLowerCase().includes(term)) {
            $(this).addClass("uk-hidden");
          } else {
            $(this).removeClass("uk-hidden");
          }
        })
      }
      $(".poll-list-item:not(.uk-hidden)").parent().parent(".polls-category").removeClass("uk-hidden");
      $(".polls-category:not(.uk-hidden):not([role='all-polls'])").children('.polls-category-label').addClass('rotation');
      $(".polls-category:not(.uk-hidden):not([role='all-polls'])").children('ul').removeClass("uk-hidden");

      if ($(".polls-category:not(.uk-hidden)").length == 0) {
        $(".no-results").removeClass('uk-hidden');
      }
    })


    $(function(){
      $(".animate-graph").on('inview', function(event) {
        
        var graphDiv = $(event.target)
        var question = graphDiv.attr("data-question");
        var result = Window.UreportStats['all-' + question];
        if(!result) {
          return
        }
        
        var results = result[0];


        var categories = [];
        var data = [];
        var colors = ["#7cb5ec", "#434348", "#90ed7d", "#f7a35c", "#8085e9", "#f15c80", "#e4d354", "#2b908f", "#f45b5b", "#91e8e1"];

        if (results.categories.length > 0) {
          var total = 0;
          for (i=0; i<results.categories.length; i++){
            category = results.categories[i];
            total += category.count;
          }
          var percentage_lookup = {};
          for (i=0; i<results.categories.length; i++){
            category = results.categories[i];
            label = category.label.trim().toUpperCase();
            categories.push(label);
            percentage = (category.count == 0) ? 0 : category.count * 100 / total;
            percentage_lookup[label] = Math.round(percentage);
            if (parseInt(percentage_lookup[label])) {
              data.push({y: percentage, color: colors[i%colors.length]});
            }
          }
        }

        Highcharts.chart('graph-all-question-' + question, {
          chart: {
            type: 'bar'
          },
          title: {
            text: null,
          },
          xAxis: {
            categories: categories,
            title: {
              text: null
            },
            labels: {
              enabled: false,
            }
          },
          yAxis: {
            min: 0,
            max: 100,
            visible: false,
            title: {
              text: null,
            },
            labels: {
              enabled: false,
            }
          },
          tooltip: {
          },
          plotOptions: {
            bar: {
              dataLabels: {
                enabled: true,
                inside: true,
                align: "left",
                formatter: function() {
                  return this.x
                }
              }
            }
          },
          legend: {
            enabled: false,
          },
          credits: {
            enabled: false
          },
          series: [{
            data: data,
          }]
        });
        
      });

      $(".graph-tabs li.all-graph").on('beforeshow', function(event) {
        var graphDiv = $("#" + event.target.id).children().children('.has-graph');
        var question = graphDiv.attr("data-question");
        var result = Window.UreportStats['all-' + question];
        var results = result[0];

        var categories = [];
        var data = [];
        var colors = ["#7cb5ec", "#434348", "#90ed7d", "#f7a35c", "#8085e9", "#f15c80", "#e4d354", "#2b908f", "#f45b5b", "#91e8e1"];

        if (results.categories.length > 0) {
          var total = 0;
          for (i=0; i<results.categories.length; i++){
            category = results.categories[i];
            total += category.count;
          }
          var percentage_lookup = {};
          for (i=0; i<results.categories.length; i++){
            category = results.categories[i];
            label = category.label.trim().toUpperCase();
            categories.push(label);
            percentage = (category.count == 0) ? 0 : category.count * 100 / total;
            percentage_lookup[label] = Math.round(percentage);
            if (parseInt(percentage_lookup[label])) {
              data.push({y: percentage, color: colors[i%colors.length]});
            }
          }
        }

        Highcharts.chart('graph-all-question-' + question, {
          chart: {
            type: 'bar'
          },
          title: {
            text: null,
          },
          xAxis: {
            categories: categories,
            title: {
              text: null
            },
            labels: {
              enabled: false,
            }
          },
          yAxis: {
            min: 0,
            max: 100,
            visible: false,
            title: {
              text: null,
            },
            labels: {
              enabled: false,
            }
          },
          tooltip: {
          },
          plotOptions: {
            bar: {
              dataLabels: {
                enabled: true,
                inside: true,
                align: "left",
                formatter: function() {
                  return this.x
                }
              }
            }
          },
          legend: {
            enabled: false,
          },
          credits: {
            enabled: false
          },
          series: [{
            data: data,
          }]
        });
        
      });

      $(".graph-tabs li.age-graph").on('beforeshow', function(event) {
        var graphDiv = $("#" + event.target.id).children().children('.has-graph');
        var question = graphDiv.attr("data-question");
        var results = Window.UreportStats['age-' + question];

        var genders = [];
        var colors = ["#E3002B", "#050E28", "#FED100", "#3FB5E5", "#FF8200", "#009316"];
        var categories_by_gender = {}
        var total_by_catedory = {};
        
        for (i=0; i<results.length; i++){
          result = results[i];
          gender = result.label;
          genders.push(gender);
          for (j=0; j<result.categories.length; j++){
            category = result.categories[j];
            label = category.label.trim().toUpperCase();
            if(!(label in categories_by_gender)) {
              categories_by_gender[label] = {};
              total_by_catedory[label] = 0;
            }
            categories_by_gender[label][gender] = category.count;
            total_by_catedory[label] += category.count;
          }
        }

        var data_by_gender = {};
        for (i=0; i<genders.length; i++){
          gender = genders[i];
          data_by_gender[gender] = [];
        }
        var percentage_lookup = {};

        for (key in categories_by_gender) {
          percentage_lookup[key] = {}
          total_key = total_by_catedory[key];
          for (i=0; i<genders.length; i++){
            gender = genders[i];
            count = categories_by_gender[key][gender];

            percentage = (count == 0) ? 0 : count * 100 / total_key; 
            data_by_gender[gender].push(percentage);
          }
        }

        series = [];
        for (key in data_by_gender) {
          series.push({name: key, data: data_by_gender[key]})
        }

        Highcharts.chart('graph-age-question-' + question, {
          chart: {
            type: 'column'
          },
          title: {
            text: null,
          },
          xAxis: {
            categories: Object.keys(categories_by_gender),
            crosshair: true
          },
          yAxis: {
            min: 0,
            max: 100,
            title: {
              text: null,
            }
          },
          tooltip: {
            headerFormat: '<span style="font-size:10px">{point.key}</span><table>',
            pointFormat: '<tr><td style="color:{series.color};padding:0">{series.name}: </td>' +
              '<td style="padding:0"><b>{point.y:.1f}%</b></td></tr>',
            footerFormat: '</table>',
            shared: true,
            useHTML: true
          },
          plotOptions: {
            column: {
              pointPadding: 0.2,
              borderWidth: 0
            }
          },
          credits: {
            enabled: false
          },            
          series: series,
        });

      });

      $(".graph-tabs li.gender-graph").on('beforeshow', function(event) {
        var graphDiv = $("#" + event.target.id).children().children('.has-graph');
        var question = graphDiv.attr("data-question");
        var results = Window.UreportStats['gender-' + question];
        var genders = [];
        var colors = ["#3FB5E5", "#FF8200"];

        var categories_by_gender = {}
        var total_by_catedory = {};
        
        for (i=0; i<results.length; i++){
          result = results[i];
          gender = result.label;
          genders.push(gender);
          for (j=0; j<result.categories.length; j++){
            category = result.categories[j];
            label = category.label.trim().toUpperCase();
            if(!(label in categories_by_gender)) {
              categories_by_gender[label] = {};
              total_by_catedory[label] = 0;
            }
            categories_by_gender[label][gender] = category.count;
            total_by_catedory[label] += category.count;
          }
        }

        var data_by_gender = {};
        for (i=0; i<genders.length; i++){
          gender = genders[i];
          data_by_gender[gender] = [];
        }
        var percentage_lookup = {};

        for (key in categories_by_gender) {
          percentage_lookup[key] = {}
          total_key = total_by_catedory[key];
          for (i=0; i<genders.length; i++){
            gender = genders[i];
            count = categories_by_gender[key][gender];
            percentage = (count == 0) ? 0 : count * 100 / total_key; 
            data_by_gender[gender].push(percentage);
          }
        }

        series = [];
        for (key in data_by_gender) {
          series.push({name: key, data: data_by_gender[key]})
        }

        Highcharts.chart('graph-gender-question-' + question, {
          chart: {
            type: 'column'
          },
          title: {
            text: null,
          },
          xAxis: {
            categories: Object.keys(categories_by_gender),
            crosshair: true
          },
          yAxis: {
            min: 0,
            max: 100,
            title: {
              text: null,
            }
          },
          tooltip: {
            headerFormat: '<span style="font-size:10px">{point.key}</span><table>',
            pointFormat: '<tr><td style="color:{series.color};padding:0">{series.name}: </td>' +
              '<td style="padding:0"><b>{point.y:.1f} mm</b></td></tr>',
            footerFormat: '</table>',
            shared: true,
            useHTML: true
          },
          plotOptions: {
            column: {
              pointPadding: 0.2,
              borderWidth: 0
            }
          },
          credits: {
            enabled: false
          },            
          series: series,
        });

      });


      $(".poll-question-graph-all").each(function(){
        var question = $(this).attr("data-question");
        $.ajax({url:'/pollquestion/' + question + '/results/', dataType: "json"}).done(function(result){

          if(!result){
            return;
          }
          if(!Window.UreportStats) {
            Window.UreportStats = {}
          }
          Window.UreportStats["all-" + question] = result
          var results = result[0];  

          var categories = [];
          var data = [];
          var colors = ["#7cb5ec", "#434348", "#90ed7d", "#f7a35c", "#8085e9", "#f15c80", "#e4d354", "#2b908f", "#f45b5b", "#91e8e1"];
  
          if (results.categories.length > 0) {
            var total = 0;
            for (i=0; i<results.categories.length; i++){
              category = results.categories[i];
              total += category.count;
            }
            var percentage_lookup = {};
            for (i=0; i<results.categories.length; i++){
              category = results.categories[i];
              label = category.label.trim().toUpperCase();
              categories.push(label);
              percentage = (category.count == 0) ? 0 : category.count * 100 / total;
              percentage_lookup[label] = Math.round(percentage);
              if (parseInt(percentage_lookup[label])) {
                data.push({y: percentage, color: colors[i%colors.length]});
              }
            }
          }
  
          Highcharts.chart('graph-all-question-' + question, {
            chart: {
              type: 'bar'
            },
            title: {
              text: null,
            },
            xAxis: {
              categories: categories,
              title: {
                text: null
              },
              labels: {
                enabled: false,
              }
            },
            yAxis: {
              min: 0,
              max: 100,
              visible: false,
              title: {
                text: null,
              },
              labels: {
                enabled: false,
              }
            },
            tooltip: {
            },
            plotOptions: {
              bar: {
                dataLabels: {
                  enabled: true,
                  inside: true,
                  align: "left",
                  formatter: function() {
                    return this.x
                  }
                }
              }
            },
            legend: {
              enabled: false,
            },
            credits: {
              enabled: false
            },
            series: [{
              data: data,
            }]
          });

        });
      });
  
      $(".poll-question-graph-gender").each(function(){
        var question = $(this).attr("data-question");
        var segment = {"gender": "Gender"}
        $.ajax({url:'/pollquestion/' + question + '/results/?segment=' + encodeURIComponent(JSON.stringify(segment)), dataType: "json"}).done(function(result){

          if(!result){
            return;
          }

          if(!Window.UreportStats) {
            Window.UreportStats = {}
          }
          Window.UreportStats["gender-" + question] = result

        });
      });

      $(".poll-question-graph-age").each(function(){
        var question = $(this).attr("data-question");
        var segment = {"age": "Age"}
        $.ajax({url:'/pollquestion/' + question + '/results/?segment=' + encodeURIComponent(JSON.stringify(segment)), dataType: "json"}).done(function(result){
          if(!result){
            return;
          }
          if(!Window.UreportStats) {
            Window.UreportStats = {}
          }
          Window.UreportStats["age-" + question] = result
        });
      });
    });

    $(".poll-question-graph-keywords").each(function(){
      var question = $(this).attr("data-question");
      $.ajax({url:'/pollquestion/' + question + '/results/', dataType: "json"}).done(function(result){      
        if(!result){
          return;
        }

        var results = result[0];
        var total = 0;
        var data = [];
        var colors = gradientFactory.generate({
          from: '#DDDDDD',
          to: '{{ org|config:"primary_color"}}',
          stops: 10
        });
        
        if (results.categories.length > 0) {
          for (i=0; i<results.categories.length; i++){
            category = results.categories[i];
            total += category.count;
          }
          var percentage_lookup = {};
          for (i=0; i<results.categories.length; i++){
            category = results.categories[i];
            label = category.label.trim().toUpperCase();
            percentage = (category.count == 0) ? 0 : category.count * 100 / total;
            percentage_lookup[label] = Math.round(percentage);
            if (parseInt(percentage_lookup[label])) {
              data.push({name: label, value: percentage, color: colors[Math.min(9, Math.floor(percentage/1.5))]})
            } 
          }
        }
        Highcharts.chart('graph-keywords-question-' + question, {
          chart: {
            type: 'packedbubble',
            height: '100%'
          },
          title: {
            text: null,
          },
          tooltip: {
            useHTML: true,
            pointFormat: '<b>{point.name}:</b> {point.y}m CO<sub>2</sub>'
          },
          legend: {
            enabled: false,
          },
          plotOptions: {
            packedbubble: {
              minSize: '20',
              maxSize: '400',
              zMin: 0,
              zMax: 100,
              dataLabels: {
                enabled: true,
                format: '{point.name}',
                style: {
                  color: 'black',
                  textOutline: 'none',
                  fontWeight: 'normal'
                }
              }
            }
          },
          credits: {
            enabled: false
          },
          series: [{
            data: data
          }]
        });
      });
    });

    $(".poll-question-graph-locations").each(function(){
      var question = $(this).attr("data-question");
      var segment = {"location": "State"}
      $.ajax({url:'/pollquestion/' + question + '/results/?segment=' + encodeURIComponent(JSON.stringify(segment)), dataType: "json"}).done(function(result){
        if(!Window.UreportStats) {
          Window.UreportStats = {}
        }
        Window.UreportStats["locations-" + question] = result
      });
    });

    $(function(){

      $(".poll-question-tab").on('click', function (){
        $(this).parent('.poll-question-tabs').children('.poll-question-tab').removeClass('active');
        $(this).parent('.poll-question-tabs').children('.poll-question-tab').children('a').removeClass('primary-bg-color')
        $(this).parent('.poll-question-tabs').children('.poll-question-tab').children('a').addClass('primary-color')

        $(this).addClass('active');
        $(this).children('a').removeClass('primary-color');
        $(this).children('a').addClass('primary-bg-color');
      });

      $(".poll-question-tab").on('shown.bs.tab', function(e) {
         var tabPaneShown = e.target.getAttribute('href');
         var mapDiv = $(tabPaneShown).children('.poll-map');

         if (mapDiv.length) {
            var map = mapDiv.data('map');
            map.invalidateSize(false);
         }
      });


      $.ajax({url:'/boundaries/', dataType: "json"}).done(function(boundaries){
        $(".poll-map").each(function(){
          var question = $(this).attr("data-question");
          var colorList = {{ colors_map|safe }};
          var map = window.initMap('map-' + question, boundaries, question, '{{ district_zoom|lower }}' === 'true', '{{ ward_zoom|lower }}' === 'true', colorList=colorList);


          $(this).data('map', map);
        });
      });

    });
